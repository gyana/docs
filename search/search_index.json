{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open source, no-code business intelligence built on Django Documentation : https://gyana.github.io/docs Source Code : https://github.com/gyana/gyana Gyana is a toolkit for building business intelligence tools, written in Django. Why Gyana? In our experience, traditional BI tools lack the flexibility most businesses need, but building a modern data stack is often overkill. Gyana solves this in two ways: A set of no-code abstractions that provide close to the flexibility of code solutions (but without associated headaches) An extensible, open source codebase where it's easy to add custom business logic (think: formulas, nodes or entire features) in idiomatic Django Using Gyana, you can deliver a data analytics experience tailored to your needs of your business, stakeholders or clients, without wasting time in repetitive coding tasks. Watch our 3 minute intro to see how to use Gyana: Features Modern data stack \"in a box\" - no-code interface for ELT, writing SQL, building dashboards and automating pipelines Fully-featured collaboration system for internal teams or managing clients Opinionated, high quality, low Javascript (think: HTMX + AlpineJS) codebase built on idiomatic Django Fully open source, self-host wherever you want Getting started You can run Gyana locally <5 mins with docker: git clone git@github.com:gyana/gyana.git cd gyana docker build -f Dockerfile.dev -t gyana:dev . docker compose up Open your browser at http://localhost:8000. Note : For the signup, your activation email will be logged in the terminal \ud83d\ude0a For more detailed instructions on local developmnet, see our DEVELOPMENT guide. License This project is licensed under the terms of the MIT license.","title":"Home"},{"location":"#features","text":"Modern data stack \"in a box\" - no-code interface for ELT, writing SQL, building dashboards and automating pipelines Fully-featured collaboration system for internal teams or managing clients Opinionated, high quality, low Javascript (think: HTMX + AlpineJS) codebase built on idiomatic Django Fully open source, self-host wherever you want","title":"Features"},{"location":"#getting-started","text":"You can run Gyana locally <5 mins with docker: git clone git@github.com:gyana/gyana.git cd gyana docker build -f Dockerfile.dev -t gyana:dev . docker compose up Open your browser at http://localhost:8000. Note : For the signup, your activation email will be logged in the terminal \ud83d\ude0a For more detailed instructions on local developmnet, see our DEVELOPMENT guide.","title":"Getting started"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"automate/","text":"Automate How to keep your dashboards up to date. Automate is a single interface to view, run and schedule everything in your project. Think of it like your mission control . You'll get a top of level view of how everything fits together, and the tools to keep it running reliably and up to date. \ud83d\udc40 Reviewing your work To start with, you can view all your integrations, workflows and dashboards as connected steps on a single canvas. \ud83d\udca1 Note that unlike workflows, the positions and relationships are generated automatically. You can drag-n-drop the items on the canvas, but it will only be temporary. The relationships track the flow of data through your project - for example, a workflow is linked to an integration, if it uses that integration in a Get data node. If you've accidentally referenced the wrong data source in a dashboard or workflow, it should be easy to spot here. Your integrations and workflows have a status indicator in top right, with information on the most recent run. The possible values are \u23f1 Pending, \u25b6\ufe0f Running, \u2705 Success and \u274c Failed . If a step has \u274c Failed , you can click the Edit button to navigate to that integration or workflow, understand what went wrong, fix it, and re-run it. \ud83d\udca1 Remember that until you fix a failed step, anything that depends on that step will not get the latest version of the input data. \u25b6\ufe0f Running your project Click the Run All button in the top right to run all your integrations and workflows. They are run in dependency order - for example, if a workflow depends on an integration, we run that integration first so the workflow gets the latest data. As the project runs, you'll see the status indicator for each step update from \u23f1 Pending , to \u25b6\ufe0f Running and finally \u2705 Success or \u274c Failed . When all steps are completed, you'll get an alert. We keep track of all the historical runs , which you can view in Settings & History . The project run is a success, if all the individual steps ran successfully, otherwise it is failed. \ud83d\udca1 Currently, connectors are ignored in Run All. In future, we do plan to add this as an option. \ud83d\udcc5 Setting up a daily schedule If you're happy that your steps are running successfully, it's time to schedule them to run automatically. You can do this on the settings pages for individual integrations and workflows. On the Automate page, scheduled steps appear with a light green background, so it is easier to track what is and isn't scheduled. \ud83d\udca1 Note that you cannot schedule uploads, and connectors are always scheduled (but we plan to add an explicit option in future). By default, they will run at 00:00 GMT . You can configure the daily sync time (as an hour) in the Automate page under Settings & History , and the timezone in the team settings . For example, you can run your project at 6am in Pacific Time. As with Run All , your integrations and workflows will run in dependency order, and you view the status of current and historical runs.","title":"Automate"},{"location":"automate/#automate","text":"How to keep your dashboards up to date. Automate is a single interface to view, run and schedule everything in your project. Think of it like your mission control . You'll get a top of level view of how everything fits together, and the tools to keep it running reliably and up to date.","title":"Automate"},{"location":"automate/#reviewing-your-work","text":"To start with, you can view all your integrations, workflows and dashboards as connected steps on a single canvas. \ud83d\udca1 Note that unlike workflows, the positions and relationships are generated automatically. You can drag-n-drop the items on the canvas, but it will only be temporary. The relationships track the flow of data through your project - for example, a workflow is linked to an integration, if it uses that integration in a Get data node. If you've accidentally referenced the wrong data source in a dashboard or workflow, it should be easy to spot here. Your integrations and workflows have a status indicator in top right, with information on the most recent run. The possible values are \u23f1 Pending, \u25b6\ufe0f Running, \u2705 Success and \u274c Failed . If a step has \u274c Failed , you can click the Edit button to navigate to that integration or workflow, understand what went wrong, fix it, and re-run it. \ud83d\udca1 Remember that until you fix a failed step, anything that depends on that step will not get the latest version of the input data.","title":"\ud83d\udc40 Reviewing your work"},{"location":"automate/#running-your-project","text":"Click the Run All button in the top right to run all your integrations and workflows. They are run in dependency order - for example, if a workflow depends on an integration, we run that integration first so the workflow gets the latest data. As the project runs, you'll see the status indicator for each step update from \u23f1 Pending , to \u25b6\ufe0f Running and finally \u2705 Success or \u274c Failed . When all steps are completed, you'll get an alert. We keep track of all the historical runs , which you can view in Settings & History . The project run is a success, if all the individual steps ran successfully, otherwise it is failed. \ud83d\udca1 Currently, connectors are ignored in Run All. In future, we do plan to add this as an option.","title":"\u25b6\ufe0f Running your project"},{"location":"automate/#setting-up-a-daily-schedule","text":"If you're happy that your steps are running successfully, it's time to schedule them to run automatically. You can do this on the settings pages for individual integrations and workflows. On the Automate page, scheduled steps appear with a light green background, so it is easier to track what is and isn't scheduled. \ud83d\udca1 Note that you cannot schedule uploads, and connectors are always scheduled (but we plan to add an explicit option in future). By default, they will run at 00:00 GMT . You can configure the daily sync time (as an hour) in the Automate page under Settings & History , and the timezone in the team settings . For example, you can run your project at 6am in Pacific Time. As with Run All , your integrations and workflows will run in dependency order, and you view the status of current and historical runs.","title":"\ud83d\udcc5 Setting up a daily schedule"},{"location":"collaboration/","text":"Collaboration How to collaborate and organise work in Gyana. When you\u2019re ready to start a project in Gyana, one of the first things you want to do is invite users to help on internal workflows or work on client projects. It\u2019s important to know the distinction of teams, projects and user roles. \ud83d\ude4c Teams A team is a single workspace where you manage multiple projects and clients. For most users, this will be your organisation. Think of teams like Workspaces/Teams in products like Figma, Notion, Pitch or Slack. Each team is associated with a separate billing account. When you create a new team (either as part of signup, or within the app), you'll start on the free plan by default. \ud83d\udca1 If you have multiple clients, we still recommend that you have a single team, and use separate projects for each client. You can use invite-only projects to restrict access to only certain members in the team. You can invite unlimited collaborators to your team. The two user roles in Gyana are Admins and Members . Everyone in the team has full access to all your projects, but only Admins have permissions to manage members, billing and team settings. \ud83d\uddc2 Projects A project gathers your data analytics to solve and share the results of a common set of problems. Projects are where all your data analytics work will happen - integrations, workflows and dashboards. \ud83d\udca1 Any data sources you integrate with a project are only available in that project. You can create unlimited projects in each team available on all plans. You can start from scratch, or if you've built a project that you want to re-use (e.g. for a different client), just click \" duplicate \".","title":"Collaboration"},{"location":"collaboration/#collaboration","text":"How to collaborate and organise work in Gyana. When you\u2019re ready to start a project in Gyana, one of the first things you want to do is invite users to help on internal workflows or work on client projects. It\u2019s important to know the distinction of teams, projects and user roles.","title":"Collaboration"},{"location":"collaboration/#teams","text":"A team is a single workspace where you manage multiple projects and clients. For most users, this will be your organisation. Think of teams like Workspaces/Teams in products like Figma, Notion, Pitch or Slack. Each team is associated with a separate billing account. When you create a new team (either as part of signup, or within the app), you'll start on the free plan by default. \ud83d\udca1 If you have multiple clients, we still recommend that you have a single team, and use separate projects for each client. You can use invite-only projects to restrict access to only certain members in the team. You can invite unlimited collaborators to your team. The two user roles in Gyana are Admins and Members . Everyone in the team has full access to all your projects, but only Admins have permissions to manage members, billing and team settings.","title":"\ud83d\ude4c Teams"},{"location":"collaboration/#projects","text":"A project gathers your data analytics to solve and share the results of a common set of problems. Projects are where all your data analytics work will happen - integrations, workflows and dashboards. \ud83d\udca1 Any data sources you integrate with a project are only available in that project. You can create unlimited projects in each team available on all plans. You can start from scratch, or if you've built a project that you want to re-use (e.g. for a different client), just click \" duplicate \".","title":"\ud83d\uddc2 Projects"},{"location":"customapi/","text":"Custom API reference Learn how to use the Custom API integration to import data. The custom API integration imports data from an API, with flexible configuration options including OAuth2. The custom API is a good option import data from a web service, including internal APIs, when a connector is not available. \ud83c\udf10 Fetching and importing data To start with, you can enter a URL (as an example, see JSON Placeholder) for your API and click import. We'll fetch the data with a standard HTTP GET request, extract the JSON list of results, convert to newline delimited JSON and load into Gyana. \ud83d\udca1 If anything goes wrong, you'll get detailed debug information including information on the HTTP response and a preview of the JSON. It is common for APIs to return a nested data structure, where the data you want is not at the top level. For example: { \"status\": \"ok\", \"results\": 200, \"items\": [ { \"userId\": 1, \"id\": 1, ...}, { \"userId\": 1, \"id\": 2, ...}, { \"userId\": 1, \"id\": 3, ...}, ... ] } Rather than try to guess, we ask you to specify the part of the JSON you need with JSON Path. The most common case will be where you want to sub-select part of the JSON by key - like in this example, where you'd need to write $.items . \ud83d\udca1 JSON keys with spaces or other special characters need to use a more explicit version. For example, if the key is Item list then the JSON Path is $.['Item list'] . \ud83d\udd12 Authenticating We support common authentication methods, including API Key , Bearer Token , Basic Auth , Digest Auth and OAuth2 . You'll be able to enter this information for your custom API, and we'll automatically set the necessary headers and query params in the request. \ud83d\udca1 Keys, tokens and passwords are all encrypted at rest, so only you have access to them. OAuth2 To authenticate with an API with OAuth2, you can setup your OAuth2 connection once and re-use the connection. Under project settings , create a new OAuth connection and name it. You'll then be prompted to provide information on the service. To get your client ID and client secret , you'll need to register a new OAuth2 app for your service, This is usually found under the developer settings - search online if you're not sure. They'll ask you for a callback URL , which we've provided for you. The Authorization URL and Token URL will be available somewhere in the developer documentation. Typically, they look like {service}.com/.../authorize and {service}.com/.../token . Finally, you'll have to enter the scope information, essentially a list of permissions. This will be different for every provider, check the documentation for details. If everything is correct, after you click Authorize you'll be redirected to the login page for your service, redirected back to project settings when you've logged in, and you'll see a tick for that OAuth service. You can now use this connection for any custom API. \u26a1\ufe0f Customising your request HTTP Verb You can choose from all the HTTP verbs, including GET , POST , PUT , DELETE , ... Query Params You can add key/value pairs that will be appended to the URL as query params. For example, the pair key = country , value = GB is appended as ?country=GB . \ud83d\udca1 Query params are URL encoded, e.g. + becomes %2B Body We support the common options for a request body, including form-data , x-www-form-urlencoded , raw and binary . Depending on the option, you'll be prompted to enter key/value pairs, raw text or upload files. \u270f\ufe0f Example: Airtable Airtable provides a API for each of your bases. You can use it to sync up to 100 records, ordered and filtered based on conditions you define in the URL. Here's how to sync data with the custom API: Find the URL for the table in your base. This is available in your autogenerated Airtable API documentation, and will look like https://api.airtable.com/v0/{base}/{table} Authorize the API using the \"Bearer Token\" option. The API key is in account settings. For the JSON Path option, use $.records[*].fields . (We've worked this out for you, but if you want to understand where this is coming from, take a look at the raw API response.) Your configuration page will look something like this: After that, press Import and your data will be synced. \ud83d\ude0a","title":"Custom API"},{"location":"customapi/#custom-api-reference","text":"Learn how to use the Custom API integration to import data. The custom API integration imports data from an API, with flexible configuration options including OAuth2. The custom API is a good option import data from a web service, including internal APIs, when a connector is not available.","title":"Custom API reference"},{"location":"customapi/#fetching-and-importing-data","text":"To start with, you can enter a URL (as an example, see JSON Placeholder) for your API and click import. We'll fetch the data with a standard HTTP GET request, extract the JSON list of results, convert to newline delimited JSON and load into Gyana. \ud83d\udca1 If anything goes wrong, you'll get detailed debug information including information on the HTTP response and a preview of the JSON. It is common for APIs to return a nested data structure, where the data you want is not at the top level. For example: { \"status\": \"ok\", \"results\": 200, \"items\": [ { \"userId\": 1, \"id\": 1, ...}, { \"userId\": 1, \"id\": 2, ...}, { \"userId\": 1, \"id\": 3, ...}, ... ] } Rather than try to guess, we ask you to specify the part of the JSON you need with JSON Path. The most common case will be where you want to sub-select part of the JSON by key - like in this example, where you'd need to write $.items . \ud83d\udca1 JSON keys with spaces or other special characters need to use a more explicit version. For example, if the key is Item list then the JSON Path is $.['Item list'] .","title":"\ud83c\udf10 Fetching and importing data"},{"location":"customapi/#authenticating","text":"We support common authentication methods, including API Key , Bearer Token , Basic Auth , Digest Auth and OAuth2 . You'll be able to enter this information for your custom API, and we'll automatically set the necessary headers and query params in the request. \ud83d\udca1 Keys, tokens and passwords are all encrypted at rest, so only you have access to them.","title":"\ud83d\udd12 Authenticating"},{"location":"customapi/#oauth2","text":"To authenticate with an API with OAuth2, you can setup your OAuth2 connection once and re-use the connection. Under project settings , create a new OAuth connection and name it. You'll then be prompted to provide information on the service. To get your client ID and client secret , you'll need to register a new OAuth2 app for your service, This is usually found under the developer settings - search online if you're not sure. They'll ask you for a callback URL , which we've provided for you. The Authorization URL and Token URL will be available somewhere in the developer documentation. Typically, they look like {service}.com/.../authorize and {service}.com/.../token . Finally, you'll have to enter the scope information, essentially a list of permissions. This will be different for every provider, check the documentation for details. If everything is correct, after you click Authorize you'll be redirected to the login page for your service, redirected back to project settings when you've logged in, and you'll see a tick for that OAuth service. You can now use this connection for any custom API.","title":"OAuth2"},{"location":"customapi/#customising-your-request","text":"","title":"\u26a1\ufe0f Customising your request"},{"location":"customapi/#http-verb","text":"You can choose from all the HTTP verbs, including GET , POST , PUT , DELETE , ...","title":"HTTP Verb"},{"location":"customapi/#query-params","text":"You can add key/value pairs that will be appended to the URL as query params. For example, the pair key = country , value = GB is appended as ?country=GB . \ud83d\udca1 Query params are URL encoded, e.g. + becomes %2B","title":"Query Params"},{"location":"customapi/#body","text":"We support the common options for a request body, including form-data , x-www-form-urlencoded , raw and binary . Depending on the option, you'll be prompted to enter key/value pairs, raw text or upload files.","title":"Body"},{"location":"customapi/#example-airtable","text":"Airtable provides a API for each of your bases. You can use it to sync up to 100 records, ordered and filtered based on conditions you define in the URL. Here's how to sync data with the custom API: Find the URL for the table in your base. This is available in your autogenerated Airtable API documentation, and will look like https://api.airtable.com/v0/{base}/{table} Authorize the API using the \"Bearer Token\" option. The API key is in account settings. For the JSON Path option, use $.records[*].fields . (We've worked this out for you, but if you want to understand where this is coming from, take a look at the raw API response.) Your configuration page will look something like this: After that, press Import and your data will be synced. \ud83d\ude0a","title":"\u270f\ufe0f Example: Airtable"},{"location":"dashboards/","text":"Dashboards How to display charts, metrics and other widgets in Gyana. A dashboard is a visual display of data metrics that can be shared as a report. If you've used another report builder or BI tool, our dashboard builder will feel intuitive. You get a freeform, configurable canvas and a variety of widgets to display results from your data. \ud83c\udfd7 Building your dashboard You'll start with an empty canvas. You can change the dimensions to suit your needs (e.g. width of 360 pixels for mobile). Add new widgets to the canvas and click edit to configure them. At a high level, there are four types of widget: Text, Image and Embed widgets for captions, explanations and external content Table widgets to display raw data Chart widgets to visualise the relationship between columns in your data (typically with aggregations) Controls to enable viewers to change the date range For most widgets, you need to choose the source data (\"Table\") you want to use. For charts, you'll need to configure at least one dimension and metric: Dimensions describe or categorize your data e.g. Product ID, Device, Date Metrics measure your dimensions, and is the result of an aggregration e.g. total sales, average session duration You can pre-filter the data and sort the results, and you can preview the widget before saving. We've written a guide for every widget if you run into any issues. \ud83d\udca1 You don't have to use the same data source for each widget. On the dashboard canvas, you can resize the widgets and move them around. The widgets automatically snap to a grid, to make it easier to place them neatly. You can add multiple pages , re-order and re-name them, and move widgets between them. Finally, you have the option to style your dashboard under Theme & Layout . Give it a personal touch with your own color palette, background color and font family. \ud83d\ude4c Sharing your dashboard Anyone on your team can view a dashboard. Use the \"Preview\" mode to view the widgets with all editor controls disabled. You can share a public (but unguessable) link to your dashboard. The link will be viewable by anyone who has it. You can un-share at anytime. You also have the option to password protect your dashboards, and add custom domains. \u231b Go back in time to older versions of your dashboard (in Beta) You can save different versions of your dashboard and go restore those explicitly saved versions as well as any other timepoint of your dashboard. \ud83d\udd2e What does the future hold? We know that have high standards for your dashboards! Over the next few months, we'll be introducing features like maps, PDF exports and other types of controls. Looking beyond that, we're thinking about how to move dashboards from a reporting tool, to the engine that drives you organisation. Features we have in mind include tracking progress towards goals, getting alerts and submitting data. Reach out if any of that sounds interesting!","title":"Dashboards"},{"location":"dashboards/#dashboards","text":"How to display charts, metrics and other widgets in Gyana. A dashboard is a visual display of data metrics that can be shared as a report. If you've used another report builder or BI tool, our dashboard builder will feel intuitive. You get a freeform, configurable canvas and a variety of widgets to display results from your data.","title":"Dashboards"},{"location":"dashboards/#building-your-dashboard","text":"You'll start with an empty canvas. You can change the dimensions to suit your needs (e.g. width of 360 pixels for mobile). Add new widgets to the canvas and click edit to configure them. At a high level, there are four types of widget: Text, Image and Embed widgets for captions, explanations and external content Table widgets to display raw data Chart widgets to visualise the relationship between columns in your data (typically with aggregations) Controls to enable viewers to change the date range For most widgets, you need to choose the source data (\"Table\") you want to use. For charts, you'll need to configure at least one dimension and metric: Dimensions describe or categorize your data e.g. Product ID, Device, Date Metrics measure your dimensions, and is the result of an aggregration e.g. total sales, average session duration You can pre-filter the data and sort the results, and you can preview the widget before saving. We've written a guide for every widget if you run into any issues. \ud83d\udca1 You don't have to use the same data source for each widget. On the dashboard canvas, you can resize the widgets and move them around. The widgets automatically snap to a grid, to make it easier to place them neatly. You can add multiple pages , re-order and re-name them, and move widgets between them. Finally, you have the option to style your dashboard under Theme & Layout . Give it a personal touch with your own color palette, background color and font family.","title":"\ud83c\udfd7 Building your dashboard"},{"location":"dashboards/#sharing-your-dashboard","text":"Anyone on your team can view a dashboard. Use the \"Preview\" mode to view the widgets with all editor controls disabled. You can share a public (but unguessable) link to your dashboard. The link will be viewable by anyone who has it. You can un-share at anytime. You also have the option to password protect your dashboards, and add custom domains.","title":"\ud83d\ude4c Sharing your dashboard"},{"location":"dashboards/#go-back-in-time-to-older-versions-of-your-dashboard-in-beta","text":"You can save different versions of your dashboard and go restore those explicitly saved versions as well as any other timepoint of your dashboard.","title":"\u231b Go back in time to older versions of your dashboard (in Beta)"},{"location":"dashboards/#what-does-the-future-hold","text":"We know that have high standards for your dashboards! Over the next few months, we'll be introducing features like maps, PDF exports and other types of controls. Looking beyond that, we're thinking about how to move dashboards from a reporting tool, to the engine that drives you organisation. Features we have in mind include tracking progress towards goals, getting alerts and submitting data. Reach out if any of that sounds interesting!","title":"\ud83d\udd2e What does the future hold?"},{"location":"datetime/","text":"Datetime reference How to convert text to date & time with our functions. Parsing and formatting date & time is a common part of data preparation. This guide will show you how use the Gyana functions parse_date , parse_time , parse_datetime and format_datetime . Parsing If you have date & time information stored in a text column, you'll need to use a parsing function to extract it. \ud83d\udca1 The column type is displayed by an icon in the header. You can hover over it to view the full type name. You'll need to tell the parser how to parse the text with a format string. Here are a few examples: parse_date('2022-03-22', '%Y-%m-%d')parse_time('20:10:03', '%T')parse_datetime('Tuesday 22 March 2022 at 09:30', '%A %e %B %G at %R') Formatting Formatting is the opposite of parsing - you have a date & time column, and you'd like to display a text representation of it. Just as with parsing, you'll need to tell the formatter how to format the text with a format string. Here are a few examples: format_datetime(datetime_col, '%Y-%m-%d') # e.g. 2022-03-22format_datetime(datetime_col, '%T') # e.g. 20:10:03format_datetime(datetime_col, '%A %e %B %G at %R') # e.g. Tuesday 22 March 2022 at 09:30 Format string reference You can build your format string with the reference below. Any issues? Reach out to support. Format element Description Example %A The full weekday name. Wednesday %a The abbreviated weekday name. Wed %B The full month name. January %b The abbreviated month name. Jan %C The century (a year divided by 100 and truncated to an integer) as a decimal number (00-99). 20 %c The date and time representation. Wed Jan 20 21:47:00 2021 %D The date in the format %m/%d/%y. 01/20/21 %d The day of the month as a decimal number (01-31). 20 %e The day of month as a decimal number (1-31); single digits are preceded by a space. 20 %F The date in the format %Y-%m-%d. 2021-01-20 %G The ISO 8601 year with century as a decimal number. Each ISO year begins on the Monday before the first Thursday of the Gregorian calendar year. Note that %G and %Y may produce different results near Gregorian year boundaries, where the Gregorian year and ISO year can diverge. 2021 %g The ISO 8601 year without century as a decimal number (00-99). Each ISO year begins on the Monday before the first Thursday of the Gregorian calendar year. Note that %g and %y may produce different results near Gregorian year boundaries, where the Gregorian year and ISO year can diverge. 21 %H The hour (24-hour clock) as a decimal number (00-23). 21 %h The abbreviated month name. Jan %I The hour (12-hour clock) as a decimal number (01-12). 09 %j The day of the year as a decimal number (001-366). 020 %k The hour (24-hour clock) as a decimal number (0-23); single digits are preceded by a space. 21 %l The hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a space. 9 %M The minute as a decimal number (00-59). 47 %m The month as a decimal number (01-12). 01 %n A newline character. %P Either am or pm. pm %p Either AM or PM. PM %Q The quarter as a decimal number (1-4). 1 %R The time in the format %H:%M. 21:47 %S The second as a decimal number (00-60). 00 %s The number of seconds since 1970-01-01 00:00:00. Always overrides all other format elements, independent of where %s appears in the string. If multiple %s elements appear, then the last one takes precedence. 1611179220 %T The time in the format %H:%M:%S. 21:47:00 %t A tab character. %U The week number of the year (Sunday as the first day of the week) as a decimal number (00-53). 03 %u The weekday (Monday as the first day of the week) as a decimal number (1-7). 3 %V The ISO 8601 week number of the year (Monday as the first day of the week) as a decimal number (01-53). If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is week 53 of the previous year, and the next week is week 1. 03 %W The week number of the year (Monday as the first day of the week) as a decimal number (00-53). 03 %w The weekday (Sunday as the first day of the week) as a decimal number (0-6). 3 %X The time representation in HH:MM:SS format. 21:47:00 %x The date representation in MM/DD/YY format. 01/20/21 %Y The year with century as a decimal number. 2021 %y The year without century as a decimal number (00-99), with an optional leading zero. Can be mixed with %C. If %C is not specified, years 00-68 are 2000s, while years 69-99 are 1900s. 21 %Z The time zone name. UTC-5 %z The offset from the Prime Meridian in the format +HHMM or -HHMM as appropriate, with positive values representing locations east of Greenwich. -0500 %% A single % character. % %Ez RFC 3339-compatible numeric time zone (+HH:MM or -HH:MM). -05:00 %E S Seconds with digits of fractional precision. 00.000 for %E3S %E*S Seconds with full fractional precision (a literal '*'). 00.123456 %E4Y Four-character years (0001 ... 9999). Note that %Y produces as many characters as it takes to fully render the year. 2021","title":"Date & Time"},{"location":"datetime/#datetime-reference","text":"How to convert text to date & time with our functions. Parsing and formatting date & time is a common part of data preparation. This guide will show you how use the Gyana functions parse_date , parse_time , parse_datetime and format_datetime .","title":"Datetime reference"},{"location":"datetime/#parsing","text":"If you have date & time information stored in a text column, you'll need to use a parsing function to extract it. \ud83d\udca1 The column type is displayed by an icon in the header. You can hover over it to view the full type name. You'll need to tell the parser how to parse the text with a format string. Here are a few examples: parse_date('2022-03-22', '%Y-%m-%d')parse_time('20:10:03', '%T')parse_datetime('Tuesday 22 March 2022 at 09:30', '%A %e %B %G at %R')","title":"Parsing"},{"location":"datetime/#formatting","text":"Formatting is the opposite of parsing - you have a date & time column, and you'd like to display a text representation of it. Just as with parsing, you'll need to tell the formatter how to format the text with a format string. Here are a few examples: format_datetime(datetime_col, '%Y-%m-%d') # e.g. 2022-03-22format_datetime(datetime_col, '%T') # e.g. 20:10:03format_datetime(datetime_col, '%A %e %B %G at %R') # e.g. Tuesday 22 March 2022 at 09:30","title":"Formatting"},{"location":"datetime/#format-string-reference","text":"You can build your format string with the reference below. Any issues? Reach out to support. Format element Description Example %A The full weekday name. Wednesday %a The abbreviated weekday name. Wed %B The full month name. January %b The abbreviated month name. Jan %C The century (a year divided by 100 and truncated to an integer) as a decimal number (00-99). 20 %c The date and time representation. Wed Jan 20 21:47:00 2021 %D The date in the format %m/%d/%y. 01/20/21 %d The day of the month as a decimal number (01-31). 20 %e The day of month as a decimal number (1-31); single digits are preceded by a space. 20 %F The date in the format %Y-%m-%d. 2021-01-20 %G The ISO 8601 year with century as a decimal number. Each ISO year begins on the Monday before the first Thursday of the Gregorian calendar year. Note that %G and %Y may produce different results near Gregorian year boundaries, where the Gregorian year and ISO year can diverge. 2021 %g The ISO 8601 year without century as a decimal number (00-99). Each ISO year begins on the Monday before the first Thursday of the Gregorian calendar year. Note that %g and %y may produce different results near Gregorian year boundaries, where the Gregorian year and ISO year can diverge. 21 %H The hour (24-hour clock) as a decimal number (00-23). 21 %h The abbreviated month name. Jan %I The hour (12-hour clock) as a decimal number (01-12). 09 %j The day of the year as a decimal number (001-366). 020 %k The hour (24-hour clock) as a decimal number (0-23); single digits are preceded by a space. 21 %l The hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a space. 9 %M The minute as a decimal number (00-59). 47 %m The month as a decimal number (01-12). 01 %n A newline character. %P Either am or pm. pm %p Either AM or PM. PM %Q The quarter as a decimal number (1-4). 1 %R The time in the format %H:%M. 21:47 %S The second as a decimal number (00-60). 00 %s The number of seconds since 1970-01-01 00:00:00. Always overrides all other format elements, independent of where %s appears in the string. If multiple %s elements appear, then the last one takes precedence. 1611179220 %T The time in the format %H:%M:%S. 21:47:00 %t A tab character. %U The week number of the year (Sunday as the first day of the week) as a decimal number (00-53). 03 %u The weekday (Monday as the first day of the week) as a decimal number (1-7). 3 %V The ISO 8601 week number of the year (Monday as the first day of the week) as a decimal number (01-53). If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is week 53 of the previous year, and the next week is week 1. 03 %W The week number of the year (Monday as the first day of the week) as a decimal number (00-53). 03 %w The weekday (Sunday as the first day of the week) as a decimal number (0-6). 3 %X The time representation in HH:MM:SS format. 21:47:00 %x The date representation in MM/DD/YY format. 01/20/21 %Y The year with century as a decimal number. 2021 %y The year without century as a decimal number (00-99), with an optional leading zero. Can be mixed with %C. If %C is not specified, years 00-68 are 2000s, while years 69-99 are 1900s. 21 %Z The time zone name. UTC-5 %z The offset from the Prime Meridian in the format +HHMM or -HHMM as appropriate, with positive values representing locations east of Greenwich. -0500 %% A single % character. % %Ez RFC 3339-compatible numeric time zone (+HH:MM or -HH:MM). -05:00 %E S Seconds with digits of fractional precision. 00.000 for %E3S %E*S Seconds with full fractional precision (a literal '*'). 00.123456 %E4Y Four-character years (0001 ... 9999). Note that %Y produces as many characters as it takes to fully render the year. 2021","title":"Format string reference"},{"location":"export/","text":"Export How to export your data in Gyana to a csv file. Exporting to a CSV file is a handy way for exporting your data to work with it elsewhere. \ud83d\udce4 Export to CSV You can export to CSV at any point in the workflow by using the feature at that particular node. \ud83d\udca1 You can download the raw data from your integration by using the exporting to CSV feature from your first \"Get Data\" node. Click on the \"edit\" button at the node you want to export from In the pop-up window, click on the \"download\" icon You will receive a pop-up that acknowledges your request You will receive an email with the link to download your CSV export Click on the \"Download your CSV export now\" link to download your CSV file. \ud83d\udca1 The email with the download link will be sent to the email address you have registered with for your Gyana 2.0 account. \ud83d\udca1 The link to download your CSV export will only be valid for 7 days. \ud83d\udd2e What does the future hold? Exporting to other file formats is certainly something we can build - we just need to know what you need! Put in a feature request at https://feedback.gyana.com/ or upvote the request that another user has submitted - the more upvotes the higher the priority.","title":"Export"},{"location":"export/#export","text":"How to export your data in Gyana to a csv file. Exporting to a CSV file is a handy way for exporting your data to work with it elsewhere.","title":"Export"},{"location":"export/#export-to-csv","text":"You can export to CSV at any point in the workflow by using the feature at that particular node. \ud83d\udca1 You can download the raw data from your integration by using the exporting to CSV feature from your first \"Get Data\" node. Click on the \"edit\" button at the node you want to export from In the pop-up window, click on the \"download\" icon You will receive a pop-up that acknowledges your request You will receive an email with the link to download your CSV export Click on the \"Download your CSV export now\" link to download your CSV file. \ud83d\udca1 The email with the download link will be sent to the email address you have registered with for your Gyana 2.0 account. \ud83d\udca1 The link to download your CSV export will only be valid for 7 days.","title":"\ud83d\udce4 Export to CSV"},{"location":"export/#what-does-the-future-hold","text":"Exporting to other file formats is certainly something we can build - we just need to know what you need! Put in a feature request at https://feedback.gyana.com/ or upvote the request that another user has submitted - the more upvotes the higher the priority.","title":"\ud83d\udd2e What does the future hold?"},{"location":"functions/","text":"Function reference How to use functions within the formula node in workflows. abs( number ) Calculate the absolute value of a numeric value. Arguments: number: a numeric scalar or column add( x, y ) Adds two numeric values together. Arguments: x: a numeric scalar or column y: a numeric scalar or column and( value, ... ) Logical and operaion Arguments: value: boolean scalars or columns between( value, lower, upper ) Check if value falls between the lower/upper bounds. Arguments: value: a scalar or column lower: a scalar or column representing the lower bound upper: a scalar or column representing the upper bound convert( value, type ) Change the type of a value to a different data type. Arguments: value: a scalar or column type: the type to convert to, accepts `text`, `float`, `int`, `str`, `time`, `date` and `timestamp` ceiling( number ) Round a numeric value up to the nearest integer value greater than or equal to this value. Arguments: number: a numeric scalar or column coalesce( value, ... ) Returns the first non-null value from the passed arguments in left-to-right order Arguments: value: scalars or columns, uses the first not null record contains( text, pattern ) Determine if text exactly contains the given pattern. Arguments: text: a text scalar or column that should contain pattern pattern: a text scalar or column that should be in text date( year, month, day ) Create a date from year, month and day Arguments: year: a integer scalar or column providing the year month: a integer scalar or column providing the month day: a integer scalar or column providing the day time( hour, minute, second ) Create a time from hour, minute and second Arguments: hour: a integer scalar or column providing the hour minute: a integer scalar or column providing the minute second: a integer scalar or column providing the second extract_date( date ) Get date part from a timestamp value day( date ) Get the day of month from a date or timestamp value Arguments: date: a timestamp scalar or column day_of_week( date ) Get day of the week from date or timestamp, starting from 1 Sunday to 7 Saturday Arguments: date: a timestamp scalar or column divide( dividend, divisor ) Divide dividend by divisor Arguments: dividend: a numeric scalar or column divisor: a numeric scalar or column epoch_seconds( timestamp ) Seconds passed since 00:00:00 UTC on 1 January 1970 also called UNIX time Arguments: timestamp: a timestamp scalar or column exp( value ) Calculate exponential value Arguments: value: a scalar or column find( text, searchtext ) Returns position (0 indexed) of first occurence of searchtext in text Arguments: text: a text scalar or column searchtext: a text scalar or column floor( number ) Rounding down a numeric value to the greatest integer less or eqqual Arguments: number: a numeric scalar or column fillnull( value, fill_value ) Replace nulls in value with fill_value Arguments: value: a scalar or column fill_value: a scalar or column hash( value ) Produces a cryptographic fingerprint from value using the Fingerprint64 method Arguments: value: a scalar or column hour( time ) Get the hour from date or timestamp Arguments: time: a time scalar or column ifelse( condition, true_value, false_value ) Returns the first value if condition is true if not it returns the second value Arguments: condition: a condition of a boolean column, scalar or another formula true_value: scalar or column that is return if condition is true false_value: scalar or column that is return if condition is false isnull( value ) Check whether value is null Arguments: value: a scalar or column join( delimiter, text, ... ) Concatenate text with the delimiter Arguments: delimiter: a value that is used to separate the following arguments text: a text scalar or column json_extract( json, path ) - coming soon \ud83d\ude80 Extract a field inside JSON, returns text Arguments: json: a text value in JSON format path: path to the desired item in the format e.g. `$.a.b[0]` left( text, nchars ) Return up to nchars characters starting from start of each text Arguments: text: a text scalar or column nchars: a numeric scalar or column indicating the number of characters from left that are returned length( text ) Calculate character length from text Arguments: text: a text scalar or column like( text, pattern ) Compare text with another pattern, returns True if pattern is like text Arguments: text: a text scalar or column pattern: a text scalar or column ln( number ) Returns the natural logarithm of number Arguments: number: a numeric scalar or column log( number, base ) Returns the logarithm with base of number Arguments: number: a numeric scalar or column base: a numeric scalar or column log2( number ) Returns the logarithm with base 2 of number Arguments: number: a number scalar or column log10( number ) Returns the logarithm with base 10 of number Arguments: number: a numeric scalar or column lower( text ) Turns text to lowercase Arguments: text: a text scalar or column lpad( text, length [, fillchar] ) Returns string of given length by truncating (on left) or padding (on left) original string Arguments: text: a text scalar or column length: a numeric scalar or column indicating the length of the resulting text fillchar: a text scalar or column ltrim( text ) Remove white space on the left of text Arguments: text: a text scalar or column millisecond( time ) Get the milliseconds from date or timestamp Arguments: time: a time scalar or column minute( time ) Get the minute from date or timestamp Arguments: time: a time scalar or column month( date ) Get the month from date or timestamp Arguments: date: a timestamp scalar or column modulo( x, y ) Compute the modulo of x and y Arguments: x: an integer scalar or column y: an integer scalar or column product( x, y ) Multiply x and y Arguments: x: a numeric scalar or column y: a numeric scalar or column notnull( value ) Check whether value is null Arguments: value: a scalar or column now( ) Compute the current datetime or( value, ... ) Logical or operaion Arguments: value: boolean scalars or columns power( number, exponent ) Calculate the number to the power of exponent Arguments: number: a numeric scalar or column exponent: a numeric scalar or column regex_extract( text, pattern, index ) \ud83d\udc49 Read our in depth guide on regular expressions Returns specified index, 0 indexed, from text based on regex pattern given Arguments: text: a text scalar or column pattern: a text scalar or column index: a numeric scalar or column regex_replace( text, pattern, replace ) \ud83d\udc49 Read our in depth guide on regular expressions Replaces match found in text by regex pattern with replace text. Arguments: text: a text scalar or column pattern: a text scalar or column that is being replaced by replace: a text scalar or column that replaces the pattern in text regex_search( text, pattern ) \ud83d\udc49 Read our in depth guide on regular expressions Search regex pattern in text Arguments: text: a text scalar or column pattern: a text scalar or column repeat( text, n ) Repeat text n times Arguments: text: a text scalar or column n: a numeric scalar or column replace( text, pattern, replace ) Replaces each exact occurrence of pattern in text with replace Arguments: text: a text scalar or column pattern: a text scalar or column replace: a text scalar or column that replaces the pattern in text reverse( text ) Reverse text character order Arguments: text: a text scalar or column right( text, nchars ) Return up to nchar characters starting from end of each text. Arguments: text: a text scalar or column nchars: a numeric scalar or column indicating the number of characters from right that are returned round( number, digits ) Round number to digit decimal positon Arguments: number: a numeric scalar or column digits: an integer scalar or column rpad( text, length [, fillchar] ) Returns string of given length by truncating (on right) or padding (on right) original string Arguments: text: a text scalar or column length: a numeric scalar or column fillchar: a numeric scalar or column rtrim( text ) Remove white space on the right of text Arguments: text: a text scalar or column second( time ) Get the seconds from time or timestamp Arguments: time: a time scalar or column sqrt( number ) Calculate the square root Arguments: number: a numeric scalar or column parse_date( value, format ) \ud83d\udc49 Read our in depth guide on parsing Creates a date from a provided text and format Arguments: value: a text scalar or column in the representing a date in `format` format: a text scalar or column defining the date format of `value` e.g '%Y-%m-%d' parse_time( value, format ) \ud83d\udc49 Read our in depth guide on parsing Creates a time from a provided text and format Arguments: value: a text scalar or column in the representing a time in `format` format: a text scalar or column defining the time format of `value` e.g '%Y-%m-%d' parse_datetime( value, format ) \ud83d\udc49 Read our in depth guide on parsing Creates a datetime from a provided text and format Arguments: value: a text scalar or column in the representing a datetime in `format` format: a text scalar or column defining the datetime format of `value` e.g '%Y-%m-%d' format_datetime( datetime, format ) \ud83d\udc49 Read our in depth guide on formatting Format timestamp into string with given format Arguments: datetime: a datetime scalar or column format: determines how the resulting text is formatted trim( text ) Remove white space surrounding the text Arguments: text: a text scalar or column to_json_string( dictionary ) Transform a dictionary to a JSON string Arguments: dictionary: a dictionary column or scalar to_timezone( datetime, timezone ) Convert a date & time to a new date & time in a different timezone Arguments: datetime: a date & time scalar or column timezone: the time zone for the new column in tz format e.g. 'US/Pacific' (see a list here) subtract( minuend, subtrahend ) Substract subtrahend from minuend Arguments: minuend: a numeric scalar or column subtrahend: a numeric scalar or column subtract_days( date, days ) Substract days from date Arguments: date: a date scalar or column days: an integer scalar or column of days to subtract substitute( text, pattern [, replace] [, else] ) Replace text if with replace if pattern is equal to text optional replace with else Arguments: text: a text scalar or column pattern: a text scalar or column replace: a text scalar or column else: a text scalar or column extract_time( datetime ) Get the time from a timestamp Arguments: datetime: a datetime scalar or column datetime_seconds( seconds, unit ) Create a datetime from an integer as the number of unit since from January 1st, 1970 UTC (unix time) Arguments: seconds: an integer scalar or column unit: \"s\" for seconds, \"ms\" for milliseconds, \"us\" for microseconds datetime_diff( minuend, subtrahend, unit ) Get the difference between minuend and subtrahend in the given unit Arguments: minuend: a datetime scalar or column subtrahend: a datetime scalar or column unit: unit of the difference e.g. \"s\" for seconds today( ) Compute today's date truncate( datetime, unit ) Zero out smaller-size units beyond indicated unit Arguments: datetime: a datetime scalar or column unit: unit e.g. \"s\" for seconds upper( text ) Capitalize text. Arguments: text: a text scalar or column weekday( date ) Gets weekday from a date Arguments: date: a timestamp scalar or column year( date ) Get the year from date Arguments: date: a timestamp scalar or column","title":"Functions"},{"location":"functions/#function-reference","text":"How to use functions within the formula node in workflows.","title":"Function reference"},{"location":"functions/#abs-number","text":"Calculate the absolute value of a numeric value. Arguments: number: a numeric scalar or column","title":"abs( number )"},{"location":"functions/#add-x-y","text":"Adds two numeric values together. Arguments: x: a numeric scalar or column y: a numeric scalar or column","title":"add( x, y )"},{"location":"functions/#and-value","text":"Logical and operaion Arguments: value: boolean scalars or columns","title":"and( value, ... )"},{"location":"functions/#between-value-lower-upper","text":"Check if value falls between the lower/upper bounds. Arguments: value: a scalar or column lower: a scalar or column representing the lower bound upper: a scalar or column representing the upper bound","title":"between( value, lower, upper )"},{"location":"functions/#convert-value-type","text":"Change the type of a value to a different data type. Arguments: value: a scalar or column type: the type to convert to, accepts `text`, `float`, `int`, `str`, `time`, `date` and `timestamp`","title":"convert( value, type )"},{"location":"functions/#ceiling-number","text":"Round a numeric value up to the nearest integer value greater than or equal to this value. Arguments: number: a numeric scalar or column","title":"ceiling( number )"},{"location":"functions/#coalesce-value","text":"Returns the first non-null value from the passed arguments in left-to-right order Arguments: value: scalars or columns, uses the first not null record","title":"coalesce( value, ... )"},{"location":"functions/#contains-text-pattern","text":"Determine if text exactly contains the given pattern. Arguments: text: a text scalar or column that should contain pattern pattern: a text scalar or column that should be in text","title":"contains( text, pattern )"},{"location":"functions/#date-year-month-day","text":"Create a date from year, month and day Arguments: year: a integer scalar or column providing the year month: a integer scalar or column providing the month day: a integer scalar or column providing the day","title":"date( year, month, day )"},{"location":"functions/#time-hour-minute-second","text":"Create a time from hour, minute and second Arguments: hour: a integer scalar or column providing the hour minute: a integer scalar or column providing the minute second: a integer scalar or column providing the second","title":"time( hour, minute, second )"},{"location":"functions/#extract_date-date","text":"Get date part from a timestamp value","title":"extract_date( date )"},{"location":"functions/#day-date","text":"Get the day of month from a date or timestamp value Arguments: date: a timestamp scalar or column","title":"day( date )"},{"location":"functions/#day_of_week-date","text":"Get day of the week from date or timestamp, starting from 1 Sunday to 7 Saturday Arguments: date: a timestamp scalar or column","title":"day_of_week( date )"},{"location":"functions/#divide-dividend-divisor","text":"Divide dividend by divisor Arguments: dividend: a numeric scalar or column divisor: a numeric scalar or column","title":"divide( dividend, divisor )"},{"location":"functions/#epoch_seconds-timestamp","text":"Seconds passed since 00:00:00 UTC on 1 January 1970 also called UNIX time Arguments: timestamp: a timestamp scalar or column","title":"epoch_seconds( timestamp )"},{"location":"functions/#exp-value","text":"Calculate exponential value Arguments: value: a scalar or column","title":"exp( value )"},{"location":"functions/#find-text-searchtext","text":"Returns position (0 indexed) of first occurence of searchtext in text Arguments: text: a text scalar or column searchtext: a text scalar or column","title":"find( text, searchtext )"},{"location":"functions/#floor-number","text":"Rounding down a numeric value to the greatest integer less or eqqual Arguments: number: a numeric scalar or column","title":"floor( number )"},{"location":"functions/#fillnull-value-fill_value","text":"Replace nulls in value with fill_value Arguments: value: a scalar or column fill_value: a scalar or column","title":"fillnull( value, fill_value )"},{"location":"functions/#hash-value","text":"Produces a cryptographic fingerprint from value using the Fingerprint64 method Arguments: value: a scalar or column","title":"hash( value )"},{"location":"functions/#hour-time","text":"Get the hour from date or timestamp Arguments: time: a time scalar or column","title":"hour( time )"},{"location":"functions/#ifelse-condition-true_value-false_value","text":"Returns the first value if condition is true if not it returns the second value Arguments: condition: a condition of a boolean column, scalar or another formula true_value: scalar or column that is return if condition is true false_value: scalar or column that is return if condition is false","title":"ifelse( condition, true_value, false_value )"},{"location":"functions/#isnull-value","text":"Check whether value is null Arguments: value: a scalar or column","title":"isnull( value )"},{"location":"functions/#join-delimiter-text","text":"Concatenate text with the delimiter Arguments: delimiter: a value that is used to separate the following arguments text: a text scalar or column","title":"join( delimiter, text, ... )"},{"location":"functions/#json_extract-json-path-coming-soon","text":"Extract a field inside JSON, returns text Arguments: json: a text value in JSON format path: path to the desired item in the format e.g. `$.a.b[0]`","title":"json_extract( json, path ) - coming soon \ud83d\ude80"},{"location":"functions/#left-text-nchars","text":"Return up to nchars characters starting from start of each text Arguments: text: a text scalar or column nchars: a numeric scalar or column indicating the number of characters from left that are returned","title":"left( text, nchars )"},{"location":"functions/#length-text","text":"Calculate character length from text Arguments: text: a text scalar or column","title":"length( text )"},{"location":"functions/#like-text-pattern","text":"Compare text with another pattern, returns True if pattern is like text Arguments: text: a text scalar or column pattern: a text scalar or column","title":"like( text, pattern )"},{"location":"functions/#ln-number","text":"Returns the natural logarithm of number Arguments: number: a numeric scalar or column","title":"ln( number )"},{"location":"functions/#log-number-base","text":"Returns the logarithm with base of number Arguments: number: a numeric scalar or column base: a numeric scalar or column","title":"log( number, base )"},{"location":"functions/#log2-number","text":"Returns the logarithm with base 2 of number Arguments: number: a number scalar or column","title":"log2( number )"},{"location":"functions/#log10-number","text":"Returns the logarithm with base 10 of number Arguments: number: a numeric scalar or column","title":"log10( number )"},{"location":"functions/#lower-text","text":"Turns text to lowercase Arguments: text: a text scalar or column","title":"lower( text )"},{"location":"functions/#lpad-text-length-fillchar","text":"Returns string of given length by truncating (on left) or padding (on left) original string Arguments: text: a text scalar or column length: a numeric scalar or column indicating the length of the resulting text fillchar: a text scalar or column","title":"lpad( text, length [, fillchar] )"},{"location":"functions/#ltrim-text","text":"Remove white space on the left of text Arguments: text: a text scalar or column","title":"ltrim( text )"},{"location":"functions/#millisecond-time","text":"Get the milliseconds from date or timestamp Arguments: time: a time scalar or column","title":"millisecond( time )"},{"location":"functions/#minute-time","text":"Get the minute from date or timestamp Arguments: time: a time scalar or column","title":"minute( time )"},{"location":"functions/#month-date","text":"Get the month from date or timestamp Arguments: date: a timestamp scalar or column","title":"month( date )"},{"location":"functions/#modulo-x-y","text":"Compute the modulo of x and y Arguments: x: an integer scalar or column y: an integer scalar or column","title":"modulo( x, y )"},{"location":"functions/#product-x-y","text":"Multiply x and y Arguments: x: a numeric scalar or column y: a numeric scalar or column","title":"product( x, y )"},{"location":"functions/#notnull-value","text":"Check whether value is null Arguments: value: a scalar or column","title":"notnull( value )"},{"location":"functions/#now","text":"Compute the current datetime","title":"now( )"},{"location":"functions/#or-value","text":"Logical or operaion Arguments: value: boolean scalars or columns","title":"or( value, ... )"},{"location":"functions/#power-number-exponent","text":"Calculate the number to the power of exponent Arguments: number: a numeric scalar or column exponent: a numeric scalar or column","title":"power( number, exponent )"},{"location":"functions/#regex_extract-text-pattern-index","text":"\ud83d\udc49 Read our in depth guide on regular expressions Returns specified index, 0 indexed, from text based on regex pattern given Arguments: text: a text scalar or column pattern: a text scalar or column index: a numeric scalar or column","title":"regex_extract( text, pattern, index )"},{"location":"functions/#regex_replace-text-pattern-replace","text":"\ud83d\udc49 Read our in depth guide on regular expressions Replaces match found in text by regex pattern with replace text. Arguments: text: a text scalar or column pattern: a text scalar or column that is being replaced by replace: a text scalar or column that replaces the pattern in text","title":"regex_replace( text, pattern, replace )"},{"location":"functions/#regex_search-text-pattern","text":"\ud83d\udc49 Read our in depth guide on regular expressions Search regex pattern in text Arguments: text: a text scalar or column pattern: a text scalar or column","title":"regex_search( text, pattern )"},{"location":"functions/#repeat-text-n","text":"Repeat text n times Arguments: text: a text scalar or column n: a numeric scalar or column","title":"repeat( text, n )"},{"location":"functions/#replace-text-pattern-replace","text":"Replaces each exact occurrence of pattern in text with replace Arguments: text: a text scalar or column pattern: a text scalar or column replace: a text scalar or column that replaces the pattern in text","title":"replace( text, pattern, replace )"},{"location":"functions/#reverse-text","text":"Reverse text character order Arguments: text: a text scalar or column","title":"reverse( text )"},{"location":"functions/#right-text-nchars","text":"Return up to nchar characters starting from end of each text. Arguments: text: a text scalar or column nchars: a numeric scalar or column indicating the number of characters from right that are returned","title":"right( text, nchars )"},{"location":"functions/#round-number-digits","text":"Round number to digit decimal positon Arguments: number: a numeric scalar or column digits: an integer scalar or column","title":"round( number, digits )"},{"location":"functions/#rpad-text-length-fillchar","text":"Returns string of given length by truncating (on right) or padding (on right) original string Arguments: text: a text scalar or column length: a numeric scalar or column fillchar: a numeric scalar or column","title":"rpad( text, length [, fillchar] )"},{"location":"functions/#rtrim-text","text":"Remove white space on the right of text Arguments: text: a text scalar or column","title":"rtrim( text )"},{"location":"functions/#second-time","text":"Get the seconds from time or timestamp Arguments: time: a time scalar or column","title":"second( time )"},{"location":"functions/#sqrt-number","text":"Calculate the square root Arguments: number: a numeric scalar or column","title":"sqrt( number )"},{"location":"functions/#parse_date-value-format","text":"\ud83d\udc49 Read our in depth guide on parsing Creates a date from a provided text and format Arguments: value: a text scalar or column in the representing a date in `format` format: a text scalar or column defining the date format of `value` e.g '%Y-%m-%d'","title":"parse_date( value, format )"},{"location":"functions/#parse_time-value-format","text":"\ud83d\udc49 Read our in depth guide on parsing Creates a time from a provided text and format Arguments: value: a text scalar or column in the representing a time in `format` format: a text scalar or column defining the time format of `value` e.g '%Y-%m-%d'","title":"parse_time( value, format )"},{"location":"functions/#parse_datetime-value-format","text":"\ud83d\udc49 Read our in depth guide on parsing Creates a datetime from a provided text and format Arguments: value: a text scalar or column in the representing a datetime in `format` format: a text scalar or column defining the datetime format of `value` e.g '%Y-%m-%d'","title":"parse_datetime( value, format )"},{"location":"functions/#format_datetime-datetime-format","text":"\ud83d\udc49 Read our in depth guide on formatting Format timestamp into string with given format Arguments: datetime: a datetime scalar or column format: determines how the resulting text is formatted","title":"format_datetime( datetime, format )"},{"location":"functions/#trim-text","text":"Remove white space surrounding the text Arguments: text: a text scalar or column","title":"trim( text )"},{"location":"functions/#to_json_string-dictionary","text":"Transform a dictionary to a JSON string Arguments: dictionary: a dictionary column or scalar","title":"to_json_string( dictionary )"},{"location":"functions/#to_timezone-datetime-timezone","text":"Convert a date & time to a new date & time in a different timezone Arguments: datetime: a date & time scalar or column timezone: the time zone for the new column in tz format e.g. 'US/Pacific' (see a list here)","title":"to_timezone( datetime, timezone )"},{"location":"functions/#subtract-minuend-subtrahend","text":"Substract subtrahend from minuend Arguments: minuend: a numeric scalar or column subtrahend: a numeric scalar or column","title":"subtract( minuend, subtrahend )"},{"location":"functions/#subtract_days-date-days","text":"Substract days from date Arguments: date: a date scalar or column days: an integer scalar or column of days to subtract","title":"subtract_days( date, days )"},{"location":"functions/#substitute-text-pattern-replace-else","text":"Replace text if with replace if pattern is equal to text optional replace with else Arguments: text: a text scalar or column pattern: a text scalar or column replace: a text scalar or column else: a text scalar or column","title":"substitute( text, pattern [, replace] [, else] )"},{"location":"functions/#extract_time-datetime","text":"Get the time from a timestamp Arguments: datetime: a datetime scalar or column","title":"extract_time( datetime )"},{"location":"functions/#datetime_seconds-seconds-unit","text":"Create a datetime from an integer as the number of unit since from January 1st, 1970 UTC (unix time) Arguments: seconds: an integer scalar or column unit: \"s\" for seconds, \"ms\" for milliseconds, \"us\" for microseconds","title":"datetime_seconds( seconds, unit )"},{"location":"functions/#datetime_diff-minuend-subtrahend-unit","text":"Get the difference between minuend and subtrahend in the given unit Arguments: minuend: a datetime scalar or column subtrahend: a datetime scalar or column unit: unit of the difference e.g. \"s\" for seconds","title":"datetime_diff( minuend, subtrahend, unit )"},{"location":"functions/#today","text":"Compute today's date","title":"today( )"},{"location":"functions/#truncate-datetime-unit","text":"Zero out smaller-size units beyond indicated unit Arguments: datetime: a datetime scalar or column unit: unit e.g. \"s\" for seconds","title":"truncate( datetime, unit )"},{"location":"functions/#upper-text","text":"Capitalize text. Arguments: text: a text scalar or column","title":"upper( text )"},{"location":"functions/#weekday-date","text":"Gets weekday from a date Arguments: date: a timestamp scalar or column","title":"weekday( date )"},{"location":"functions/#year-date","text":"Get the year from date Arguments: date: a timestamp scalar or column","title":"year( date )"},{"location":"integrations/","text":"Integrations How to connect your data sources to Gyana. An integration is a source of data, like a CSV file, Google Sheet, ads account, database, or web app. Since you can't do data analytics without data (!), it's our top priority to make it as effortless as possible for you to integrate data from anywhere. \ud83d\udca1 If you're having difficulties importing data, take a look at our troubleshooting guide. \ud83d\ude9b Choosing your import method Gyana has a wide variety of ways to connect to your data. At a high level, we recommend three possible approaches: Dedicated connectors with one-click setup, for sources like Google Analytics More flexible options to build your own connections with Google Sheets , CSV upload , custom APIs and webhooks Custom integrations built by the Gyana team for your project We'll go through them one by one. Connectors Connectors are specially made integrations for specific data sources, like Google Analytics or Facebook Ads. We support 80+ connectors out of the box, with more coming every month. Connectors are the best choice, if available. After a one-time authorization process, new data is synced on a regular basis, and you'll have many tables of data to choose from. \ud83d\udca1 The data sync frequency is 24 hours . You can set the daily sync time in your project settings. Connectors are powered by our unique partnership with Fivetran. They've built an enterprise grade data integration platform that is trusted by 2000+ demanding customers. You'll interact with them in the connector authorization page. Google Sheets If there's no dedicated connector, Google Sheets offers a great alternative for getting your data ready: Many tools offer one-off or scheduled exports to Google Sheets Many automation tools (Zapier, Pabbly Connect, n8n) write to Google Sheets Typing sheet.new in your browser bar is the quickest way we know to quickly jot down or copy + paste data Gyana has a native Google Sheets connector that will take a few seconds to import. Just share the sheet with us, copy and paste the URL, and you're done. \ud83d\udca1 By default, new data will not automatically sync from your sheet if you make changes. You need to manually re-sync. We have improvements to this planned. \ud83d\udca1 You can paste a Google Sheets link to any page within a Gyana project to start adding the Integration. Upload CSV Your next alternative is the swiss-army knife of data, the CSV file. Nowadays, most tools (including Excel, databases, web apps, ads accounts) will export a CSV file that you can download and upload to Gyana. Our native CSV importer is designed to handle most CSV nonsense, including quoted newlines, jagged rows and autodetecting headers. If your CSV file fails to import, you can always try uploading to Google Drive, opening as a Google Sheet, and connect to that instead. \ud83d\udca1 We will always autodetect the first line of the CSV as a header row. Custom API The custom API is a good option import data from a web service, including internal APIs, when a connector is not available. You'll be able to automate data imports for any API, with flexible configuration options including OAuth2. Read our custom API reference to learn more. Webhooks Webhooks are a good option if your service publishes events via a webhook. You can deliver all those events as custom tables in Gyana. \ud83d\udca1 You can find webhooks as an option under connectors. Custom integrations If you have a data source in mind, but don't see an automated way to set it up with our existing tools, we'll build it for you in 2 weeks as part of our paid plans. Reach out to us to learn more. \ud83d\udd2e What does the future hold? We know first hand the pain of duct taping tools together to move your data around. Our focus is to add seamless integration to as many data sources as possible, including webhooks, APIs and web scrapers. Down the line, we're also exploring hosting public datasets (e.g. demographic segmentations, Google trends), and even paid datasets from partner providers. If that's something you'd be interested in trying out, please get in touch!","title":"Integrations"},{"location":"integrations/#integrations","text":"How to connect your data sources to Gyana. An integration is a source of data, like a CSV file, Google Sheet, ads account, database, or web app. Since you can't do data analytics without data (!), it's our top priority to make it as effortless as possible for you to integrate data from anywhere. \ud83d\udca1 If you're having difficulties importing data, take a look at our troubleshooting guide.","title":"Integrations"},{"location":"integrations/#choosing-your-import-method","text":"Gyana has a wide variety of ways to connect to your data. At a high level, we recommend three possible approaches: Dedicated connectors with one-click setup, for sources like Google Analytics More flexible options to build your own connections with Google Sheets , CSV upload , custom APIs and webhooks Custom integrations built by the Gyana team for your project We'll go through them one by one.","title":"\ud83d\ude9b Choosing your import method"},{"location":"integrations/#connectors","text":"Connectors are specially made integrations for specific data sources, like Google Analytics or Facebook Ads. We support 80+ connectors out of the box, with more coming every month. Connectors are the best choice, if available. After a one-time authorization process, new data is synced on a regular basis, and you'll have many tables of data to choose from. \ud83d\udca1 The data sync frequency is 24 hours . You can set the daily sync time in your project settings. Connectors are powered by our unique partnership with Fivetran. They've built an enterprise grade data integration platform that is trusted by 2000+ demanding customers. You'll interact with them in the connector authorization page.","title":"Connectors"},{"location":"integrations/#google-sheets","text":"If there's no dedicated connector, Google Sheets offers a great alternative for getting your data ready: Many tools offer one-off or scheduled exports to Google Sheets Many automation tools (Zapier, Pabbly Connect, n8n) write to Google Sheets Typing sheet.new in your browser bar is the quickest way we know to quickly jot down or copy + paste data Gyana has a native Google Sheets connector that will take a few seconds to import. Just share the sheet with us, copy and paste the URL, and you're done. \ud83d\udca1 By default, new data will not automatically sync from your sheet if you make changes. You need to manually re-sync. We have improvements to this planned. \ud83d\udca1 You can paste a Google Sheets link to any page within a Gyana project to start adding the Integration.","title":"Google Sheets"},{"location":"integrations/#upload-csv","text":"Your next alternative is the swiss-army knife of data, the CSV file. Nowadays, most tools (including Excel, databases, web apps, ads accounts) will export a CSV file that you can download and upload to Gyana. Our native CSV importer is designed to handle most CSV nonsense, including quoted newlines, jagged rows and autodetecting headers. If your CSV file fails to import, you can always try uploading to Google Drive, opening as a Google Sheet, and connect to that instead. \ud83d\udca1 We will always autodetect the first line of the CSV as a header row.","title":"Upload CSV"},{"location":"integrations/#custom-api","text":"The custom API is a good option import data from a web service, including internal APIs, when a connector is not available. You'll be able to automate data imports for any API, with flexible configuration options including OAuth2. Read our custom API reference to learn more.","title":"Custom API"},{"location":"integrations/#webhooks","text":"Webhooks are a good option if your service publishes events via a webhook. You can deliver all those events as custom tables in Gyana. \ud83d\udca1 You can find webhooks as an option under connectors.","title":"Webhooks"},{"location":"integrations/#custom-integrations","text":"If you have a data source in mind, but don't see an automated way to set it up with our existing tools, we'll build it for you in 2 weeks as part of our paid plans. Reach out to us to learn more.","title":"Custom integrations"},{"location":"integrations/#what-does-the-future-hold","text":"We know first hand the pain of duct taping tools together to move your data around. Our focus is to add seamless integration to as many data sources as possible, including webhooks, APIs and web scrapers. Down the line, we're also exploring hosting public datasets (e.g. demographic segmentations, Google trends), and even paid datasets from partner providers. If that's something you'd be interested in trying out, please get in touch!","title":"\ud83d\udd2e What does the future hold?"},{"location":"nodes/","text":"Nodes reference How to use each node in workflows. Our detailed guide to each node in workflows. Over time, we'll expand each node into a separate page with a detailed description, examples, and comparison to spreadsheets and SQL. Get data Select the data sources you want to transform in your workflow. They can come from results from other workflows or integrations. Save data Make the results of your workflow available for other workflows or use them in dashboards by connecting the appropriate nodes with a Save data node. Select columns Use the select columns node to choose a subset of columns from the input table. You can choose whether the selected columns are kept or excluded with the select mode dropdown. Join Use the join node to merge together two tables that share a common column (e.g. an internal id or email address). You'll need to specify which column you're using from each of the two tables ( Left join and Right join ). You can always preview the two tables. \ud83d\udca1 A join node needs to have two input nodes. Inputs 1 and 2 are assigned in the order that you connected them to the join node. By convention, the Input 1 is the left table and Input 2 is the right table . Optionally, you can decide what happens to rows that don't match with the How condition. Your four options are: Inner: Only keep matching rows (default) Left: Keep all rows from the left table Right: Keep all rows from the right table Outer: Keep all rows For the Left , Right and Outer joins, any non-matching rows are filled with null values . Usually you'll want to use Inner , unless you know you have missing data and you want to handle this as a special case. Group and Aggregate Use the group and aggregate node to generate summary statistics for groups of rows. You'll start with the group columns, which are used to place the rows from the input table into groups: If you choose one group column, then the rows are grouped by each unique value in that column. If you choose multiple group columns, then the rows are grouped by each unique combination of values across the columns. If you don't choose a group column, all rows will go in one group. \ud83d\udca1 For certain columns, all the values will be unique and grouping won't do anything. E.g. if you have decimal numbers, you'll need to round them to whole numbers before grouping. For the next step, you decide what metrics to calculate to summarise each group. These will be aggregation metrics like SUM or MEAN. You can compute as many aggregations as you like. By default, we'll show the size (COUNT) of each group. The output table will show each group column, along with each aggregation. Union Use the union node to stack data from multiple input nodes with the same schema. \ud83d\udca1 A union node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error. Optionally, you can decide to do with duplicate rows. By default, they are kept, but you can remove them with the distinct option. Except Use the except node to remove rows that exist in a second table. \ud83d\udca1 Like the union node, an except node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error. Sort Use the sort node to sort the rows based on column values. For each column, you can decide if rows should be sorted in ascending (default) or descending order. \ud83d\udca1 The priority of the sort is determined by the order of the sort columns. Limit Use the limit node to choose a fixed number of rows. The Limit option to choose how many rows to keep. By default, you'll start from the first row, but you can use the Offset option to change this. \ud83d\udca1 The order of the rows is not guaranteed unless you use a sort node before a limit node. Filter Use the filter node to filter rows from the input node by a condition. Rows are kept if the condition is true. If you provide multiple conditions, rows are kept if all of them are true. \ud83d\udca1 We don't currently support OR filters. For now, the workaround is to use multiple filter nodes, and combine together with a union node. Distinct Use the distinct node to remove duplicate rows. By default, all the columns will be used to compare rows, to decide if there are duplicate values. Optionally, you can choose to compare only a subset of columns. Pivot Use the pivot node to summarise the relationship between two columns. To build a pivot table, you'll need to specify the two columns to compare: The Pivot index is the vertical axis of the pivot table The Pivot column is the horizontal axis of the pivot table You'll then need to decide what metric to summarise ( Pivot value ), and how to aggregate it. \ud83d\udca1 Currently you can only summarise by a single metric. If you need to summarise multiple metrics, take a look at the group and aggregate node. The output will show the relationship of each unique combination of the two columns, in a 2D layout. Unpivot Use the unpivot node to reverse data that is pivoted. Pivoted data is great for presentation, but is not a good format for data analytics. You can use the Unpivot node to combine multiple columns into separate row values. First provide the new column names for the category column and the value column. The categories will be the different column names from the selected columns and the values will be taken from the rows of these columns. You can also select specific columns you would like to keep without unpivotting them. Intersect Use the intersect node to only include rows that appear in all the input nodes. \ud83d\udca1 An intersect node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error. Edit Use the edit node to transform columns using pre-defined functions. You'll need to choose the column, the function to apply and (in certain cases) the value for the function. Edits are useful for common operations like basic maths, manipulating strings or extracting parts of dates. \ud83d\udca1 For more custom logic, take a look at the formula node. Add Use the add node to create new columns using pre-built functions. The behaviour is identical to the edit node, except that the output creates new columns instead of replacing existing columns. Convert (coming soon \ud83d\ude80 ) Use the convert node to change the data type of columns, for example, turning numbers into text. \ud83d\udca1 If a conversion fails, it means that the current column contains data whose format cannot be converted. Often this happens when otherwise numerical columns contain bits of text like letters or hyphens. You will need to clean these cases before by using the edit or formula node. Rename Use the rename node to rename the columns from the input node. Keep in mind that column names: can only contain letters, numbers and underscores must start with a letter or underscore are limited to 300 characters in length Formula Use the formula node to create new columns using spreadsheet-like formulas. You reference columns using their name, and formulas are applied automatically to all rows in the table. You have access to arithmetic operations, and a library of functions. Example 1: Calculate payable tax on your profits (revenue-cost)*(tax/100) Example 2: Create full names from first and last names, removing extra whitespace join(strip(first_name),\" \",strip(last_name)) The formula editor will help you write your formulas with: autocompletion for column names, functions and brackets syntax highlighting to differentiate numbers, text, columns and functions error checking (wavy red lines) for mistakes in your formulas Take a look at the help tab for more examples, and a full reference with all functions. \ud83d\udca1 Functions typically one work for one type of input (e.g. number, text, date & time). We're working on making this more explicit, with better error messages as well. If you think we've missed any important functions, please reach out and let us know! Window and Calculate Use the window and calculate node to calculate a metric for each row, by looking at other rows in the chosen window. For example: 7 day moving average : order the rows by date, and for each row, take the average of a 7 row window. Cumulative sum over time: order the rows by time, and for each row, take sum of all the preceding rows Best ranking collateral in each campaign : group by campaign, order by performance, generate the rank number for each one, then use a filter node to select rows with rank number = 1. The window node is powerful, but we appreciate it's difficult to get your head around. More content and explanations are coming soon. Sentiment Analysis (coming soon \ud83d\ude80) Get a sentiment estimation between -1 (bad) to +1 (good) of your text column. Text Use the text node to write text at any point on the canvas. Text nodes help you explain your reasoning behind parts of the workflow, and communicate with collaborators. \ud83d\udca1 Text node position is not preserved when you click the format button. We're working on a solution to this.","title":"Nodes"},{"location":"nodes/#nodes-reference","text":"How to use each node in workflows. Our detailed guide to each node in workflows. Over time, we'll expand each node into a separate page with a detailed description, examples, and comparison to spreadsheets and SQL.","title":"Nodes reference"},{"location":"nodes/#get-data","text":"Select the data sources you want to transform in your workflow. They can come from results from other workflows or integrations.","title":"Get data"},{"location":"nodes/#save-data","text":"Make the results of your workflow available for other workflows or use them in dashboards by connecting the appropriate nodes with a Save data node.","title":"Save data"},{"location":"nodes/#select-columns","text":"Use the select columns node to choose a subset of columns from the input table. You can choose whether the selected columns are kept or excluded with the select mode dropdown.","title":"Select columns"},{"location":"nodes/#join","text":"Use the join node to merge together two tables that share a common column (e.g. an internal id or email address). You'll need to specify which column you're using from each of the two tables ( Left join and Right join ). You can always preview the two tables. \ud83d\udca1 A join node needs to have two input nodes. Inputs 1 and 2 are assigned in the order that you connected them to the join node. By convention, the Input 1 is the left table and Input 2 is the right table . Optionally, you can decide what happens to rows that don't match with the How condition. Your four options are: Inner: Only keep matching rows (default) Left: Keep all rows from the left table Right: Keep all rows from the right table Outer: Keep all rows For the Left , Right and Outer joins, any non-matching rows are filled with null values . Usually you'll want to use Inner , unless you know you have missing data and you want to handle this as a special case.","title":"Join"},{"location":"nodes/#group-and-aggregate","text":"Use the group and aggregate node to generate summary statistics for groups of rows. You'll start with the group columns, which are used to place the rows from the input table into groups: If you choose one group column, then the rows are grouped by each unique value in that column. If you choose multiple group columns, then the rows are grouped by each unique combination of values across the columns. If you don't choose a group column, all rows will go in one group. \ud83d\udca1 For certain columns, all the values will be unique and grouping won't do anything. E.g. if you have decimal numbers, you'll need to round them to whole numbers before grouping. For the next step, you decide what metrics to calculate to summarise each group. These will be aggregation metrics like SUM or MEAN. You can compute as many aggregations as you like. By default, we'll show the size (COUNT) of each group. The output table will show each group column, along with each aggregation.","title":"Group and Aggregate"},{"location":"nodes/#union","text":"Use the union node to stack data from multiple input nodes with the same schema. \ud83d\udca1 A union node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error. Optionally, you can decide to do with duplicate rows. By default, they are kept, but you can remove them with the distinct option.","title":"Union"},{"location":"nodes/#except","text":"Use the except node to remove rows that exist in a second table. \ud83d\udca1 Like the union node, an except node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error.","title":"Except"},{"location":"nodes/#sort","text":"Use the sort node to sort the rows based on column values. For each column, you can decide if rows should be sorted in ascending (default) or descending order. \ud83d\udca1 The priority of the sort is determined by the order of the sort columns.","title":"Sort"},{"location":"nodes/#limit","text":"Use the limit node to choose a fixed number of rows. The Limit option to choose how many rows to keep. By default, you'll start from the first row, but you can use the Offset option to change this. \ud83d\udca1 The order of the rows is not guaranteed unless you use a sort node before a limit node.","title":"Limit"},{"location":"nodes/#filter","text":"Use the filter node to filter rows from the input node by a condition. Rows are kept if the condition is true. If you provide multiple conditions, rows are kept if all of them are true. \ud83d\udca1 We don't currently support OR filters. For now, the workaround is to use multiple filter nodes, and combine together with a union node.","title":"Filter"},{"location":"nodes/#distinct","text":"Use the distinct node to remove duplicate rows. By default, all the columns will be used to compare rows, to decide if there are duplicate values. Optionally, you can choose to compare only a subset of columns.","title":"Distinct"},{"location":"nodes/#pivot","text":"Use the pivot node to summarise the relationship between two columns. To build a pivot table, you'll need to specify the two columns to compare: The Pivot index is the vertical axis of the pivot table The Pivot column is the horizontal axis of the pivot table You'll then need to decide what metric to summarise ( Pivot value ), and how to aggregate it. \ud83d\udca1 Currently you can only summarise by a single metric. If you need to summarise multiple metrics, take a look at the group and aggregate node. The output will show the relationship of each unique combination of the two columns, in a 2D layout.","title":"Pivot"},{"location":"nodes/#unpivot","text":"Use the unpivot node to reverse data that is pivoted. Pivoted data is great for presentation, but is not a good format for data analytics. You can use the Unpivot node to combine multiple columns into separate row values. First provide the new column names for the category column and the value column. The categories will be the different column names from the selected columns and the values will be taken from the rows of these columns. You can also select specific columns you would like to keep without unpivotting them.","title":"Unpivot"},{"location":"nodes/#intersect","text":"Use the intersect node to only include rows that appear in all the input nodes. \ud83d\udca1 An intersect node can have unlimited inputs, but they all need to have the same schema (i.e. column names and data types), otherwise it will return an error.","title":"Intersect"},{"location":"nodes/#edit","text":"Use the edit node to transform columns using pre-defined functions. You'll need to choose the column, the function to apply and (in certain cases) the value for the function. Edits are useful for common operations like basic maths, manipulating strings or extracting parts of dates. \ud83d\udca1 For more custom logic, take a look at the formula node.","title":"Edit"},{"location":"nodes/#add","text":"Use the add node to create new columns using pre-built functions. The behaviour is identical to the edit node, except that the output creates new columns instead of replacing existing columns.","title":"Add"},{"location":"nodes/#convert-coming-soon","text":"Use the convert node to change the data type of columns, for example, turning numbers into text. \ud83d\udca1 If a conversion fails, it means that the current column contains data whose format cannot be converted. Often this happens when otherwise numerical columns contain bits of text like letters or hyphens. You will need to clean these cases before by using the edit or formula node.","title":"Convert (coming soon \ud83d\ude80 )"},{"location":"nodes/#rename","text":"Use the rename node to rename the columns from the input node. Keep in mind that column names: can only contain letters, numbers and underscores must start with a letter or underscore are limited to 300 characters in length","title":"Rename"},{"location":"nodes/#formula","text":"Use the formula node to create new columns using spreadsheet-like formulas. You reference columns using their name, and formulas are applied automatically to all rows in the table. You have access to arithmetic operations, and a library of functions. Example 1: Calculate payable tax on your profits (revenue-cost)*(tax/100) Example 2: Create full names from first and last names, removing extra whitespace join(strip(first_name),\" \",strip(last_name)) The formula editor will help you write your formulas with: autocompletion for column names, functions and brackets syntax highlighting to differentiate numbers, text, columns and functions error checking (wavy red lines) for mistakes in your formulas Take a look at the help tab for more examples, and a full reference with all functions. \ud83d\udca1 Functions typically one work for one type of input (e.g. number, text, date & time). We're working on making this more explicit, with better error messages as well. If you think we've missed any important functions, please reach out and let us know!","title":"Formula"},{"location":"nodes/#window-and-calculate","text":"Use the window and calculate node to calculate a metric for each row, by looking at other rows in the chosen window. For example: 7 day moving average : order the rows by date, and for each row, take the average of a 7 row window. Cumulative sum over time: order the rows by time, and for each row, take sum of all the preceding rows Best ranking collateral in each campaign : group by campaign, order by performance, generate the rank number for each one, then use a filter node to select rows with rank number = 1. The window node is powerful, but we appreciate it's difficult to get your head around. More content and explanations are coming soon.","title":"Window and Calculate"},{"location":"nodes/#sentiment-analysis-coming-soon","text":"Get a sentiment estimation between -1 (bad) to +1 (good) of your text column.","title":"Sentiment Analysis (coming soon \ud83d\ude80)"},{"location":"nodes/#text","text":"Use the text node to write text at any point on the canvas. Text nodes help you explain your reasoning behind parts of the workflow, and communicate with collaborators. \ud83d\udca1 Text node position is not preserved when you click the format button. We're working on a solution to this.","title":"Text"},{"location":"regex/","text":"Regular expressions reference How to search, extract and replace text in Gyana. Regular expressions (or \"regex\") are a system for working with text data. If you've hit the limitations of functions like substitute , upper or strip , you might find regular expressions useful. Think of it like advanced search and replace. \ud83d\udca1 There is a learning curve, but you'll unlock the ability to do pretty much anything you can imagine with text, and maybe even save the day. In this guide, we'll give you a brief overview of how regular expressions work (with links), and show you how use the Gyana functions regex_extract , regex_replace regex_search . Regular expressions Suppose you have the sentence \" The quick brown fox jumps over the lazy dog \", and you wanted to replace all occurrences of the word \" dog \" with \" cat \". You can do that with a standard search and replace, e.g. using the substitute function. But now suppose you wanted to replace \" all words that start with 'd' \" with \" cat \". Standard search replace won't work, because there are lots of words that start with 'd'. That's where we need a regular expression. A regular expression is how we describe something like \" all words that start with 'd' \", in a way a computer can understand. It's a language for describing patterns in text, which the computer will then go and search for. In this case, the regular expression we want is \\sd[a-z] +. Here's why: \\s matches a space (typically before a new word) d matches the letter d [a-z]+ matches a string of lowercase letters one or more times Taken together, the computer will look for \"a space, followed by a d , followed by one or more lowercase letters \" - which is the same as saying \" all words that start with 'd' \". Designing a regex for your specific problem will take a few minutes of trial and error. Here are a few resources we recommend: A guide for learning regex at RegexOne Regex101, an interactive editor where you can prototype your regex A syntax reference for re2, the regex engine used by Gyana Regex functions Now that we've covered the basics, here's how to think about the regex functions in Gyana. regex_search will return true if the text matches the regex pattern. Primarily useful for filtering data, e.g. to filter out records that contain a valid zip code or email address. regex_extract will extract the specific piece of text in the regex pattern. This is great for cleaning data, e.g. extracting emails or phone numbers. Since a regex can have multiple matches, you use the index argument to decide which match to keep (e.g. first, second, ...). regex_replace will replace the matched text with a replacement you define - think of it as advanced search and replace. If you want to refer to the original text in your replacement, use \\0 - for example, if the matched text is dog and the replacement is \\0s , the final result is dogs . If you ever get stuck, bear in mind that even seasoned programmers get tripped up by regex - you're not alone! If you have any issues, just reach out via the support.","title":"Regular Expressions"},{"location":"regex/#regular-expressions-reference","text":"How to search, extract and replace text in Gyana. Regular expressions (or \"regex\") are a system for working with text data. If you've hit the limitations of functions like substitute , upper or strip , you might find regular expressions useful. Think of it like advanced search and replace. \ud83d\udca1 There is a learning curve, but you'll unlock the ability to do pretty much anything you can imagine with text, and maybe even save the day. In this guide, we'll give you a brief overview of how regular expressions work (with links), and show you how use the Gyana functions regex_extract , regex_replace regex_search .","title":"Regular expressions reference"},{"location":"regex/#regular-expressions","text":"Suppose you have the sentence \" The quick brown fox jumps over the lazy dog \", and you wanted to replace all occurrences of the word \" dog \" with \" cat \". You can do that with a standard search and replace, e.g. using the substitute function. But now suppose you wanted to replace \" all words that start with 'd' \" with \" cat \". Standard search replace won't work, because there are lots of words that start with 'd'. That's where we need a regular expression. A regular expression is how we describe something like \" all words that start with 'd' \", in a way a computer can understand. It's a language for describing patterns in text, which the computer will then go and search for. In this case, the regular expression we want is \\sd[a-z] +. Here's why: \\s matches a space (typically before a new word) d matches the letter d [a-z]+ matches a string of lowercase letters one or more times Taken together, the computer will look for \"a space, followed by a d , followed by one or more lowercase letters \" - which is the same as saying \" all words that start with 'd' \". Designing a regex for your specific problem will take a few minutes of trial and error. Here are a few resources we recommend: A guide for learning regex at RegexOne Regex101, an interactive editor where you can prototype your regex A syntax reference for re2, the regex engine used by Gyana","title":"Regular expressions"},{"location":"regex/#regex-functions","text":"Now that we've covered the basics, here's how to think about the regex functions in Gyana. regex_search will return true if the text matches the regex pattern. Primarily useful for filtering data, e.g. to filter out records that contain a valid zip code or email address. regex_extract will extract the specific piece of text in the regex pattern. This is great for cleaning data, e.g. extracting emails or phone numbers. Since a regex can have multiple matches, you use the index argument to decide which match to keep (e.g. first, second, ...). regex_replace will replace the matched text with a replacement you define - think of it as advanced search and replace. If you want to refer to the original text in your replacement, use \\0 - for example, if the matched text is dog and the replacement is \\0s , the final result is dogs . If you ever get stuck, bear in mind that even seasoned programmers get tripped up by regex - you're not alone! If you have any issues, just reach out via the support.","title":"Regex functions"},{"location":"sheets/","text":"Google Sheets reference Tips on how to troubleshoot the Google Sheets integration. All rows are blank If you don't add an explicit cell range, the Google Sheets integration will try to infer the cell range in the first sheet by looking at cells with content. It's possible that if your Google Sheet has a blank cell or a cell with whitespace, this will be included and distort the cell range. For example, we saw an example where a 100 row dataset had a blank cell at row 10,000, and so the imported data had 9,900 blank rows. The solution is either to copy the data into a new sheet (and delete the old sheet), or explicitly provide a cell range. The header is wrong For the Google Sheets integration, the first row of the data must be the header values (i.e. the column names). If you don't include this, the first row of data will become the column names. Schema auto-detection fails When we import a Google Sheet, we use the top 500 rows of data to infer the schema. If for example, the top 500 values for a column are a number, but further down there is a string, you might get an error like Could not convert value to integer. Row XYZ, Col AB. In the short term, the solution is to manually move that row to the top and repeat the import. We're work on a fix to avoid this error in future.","title":"Google Sheets"},{"location":"sheets/#google-sheets-reference","text":"Tips on how to troubleshoot the Google Sheets integration.","title":"Google Sheets reference"},{"location":"sheets/#all-rows-are-blank","text":"If you don't add an explicit cell range, the Google Sheets integration will try to infer the cell range in the first sheet by looking at cells with content. It's possible that if your Google Sheet has a blank cell or a cell with whitespace, this will be included and distort the cell range. For example, we saw an example where a 100 row dataset had a blank cell at row 10,000, and so the imported data had 9,900 blank rows. The solution is either to copy the data into a new sheet (and delete the old sheet), or explicitly provide a cell range.","title":"All rows are blank"},{"location":"sheets/#the-header-is-wrong","text":"For the Google Sheets integration, the first row of the data must be the header values (i.e. the column names). If you don't include this, the first row of data will become the column names.","title":"The header is wrong"},{"location":"sheets/#schema-auto-detection-fails","text":"When we import a Google Sheet, we use the top 500 rows of data to infer the schema. If for example, the top 500 values for a column are a number, but further down there is a string, you might get an error like Could not convert value to integer. Row XYZ, Col AB. In the short term, the solution is to manually move that row to the top and repeat the import. We're work on a fix to avoid this error in future.","title":"Schema auto-detection fails"},{"location":"uploads/","text":"CSV uploads reference Tips on how to troubleshoot the CSV integration. The CSV file format is not fully standardised, which means there is a huge variety in the formatting of data outputted from different systems (e.g. how are quotes escaped, how are newline characters treated). Our CSV importer is designed to be permissive as possible, e.g. accepting jagged rows and quoted newlines. If your CSV fails to import, here are a few steps you can try: Make sure your CSV file has a header row. This is required for our importer. (If not, open with Excel/Google Sheets and add one.) Read the error message and see if it helps. Check your CSV is actually \"\"comma-delimited\"\". If the separator between records is a tab or pipe ( | ), you can set that in the Configure advanced settings. Upload the CSV file to Google Drive, open as a Google Sheet and use the Google Sheets integration. (This works because Google Sheets is particularly good for problematic CSV files.)","title":"CSV Uploads"},{"location":"uploads/#csv-uploads-reference","text":"Tips on how to troubleshoot the CSV integration. The CSV file format is not fully standardised, which means there is a huge variety in the formatting of data outputted from different systems (e.g. how are quotes escaped, how are newline characters treated). Our CSV importer is designed to be permissive as possible, e.g. accepting jagged rows and quoted newlines. If your CSV fails to import, here are a few steps you can try: Make sure your CSV file has a header row. This is required for our importer. (If not, open with Excel/Google Sheets and add one.) Read the error message and see if it helps. Check your CSV is actually \"\"comma-delimited\"\". If the separator between records is a tab or pipe ( | ), you can set that in the Configure advanced settings. Upload the CSV file to Google Drive, open as a Google Sheet and use the Google Sheets integration. (This works because Google Sheets is particularly good for problematic CSV files.)","title":"CSV uploads reference"},{"location":"widgets/","text":"Widgets reference How to use each widget in dashboards. Our detailed guide to each widget in workflows. Over time, we'll expand each widget into a separate page with a detailed description, visual examples, and comparison to popular BI tools. Text Use the text widget to write explanatory notes on your dashboard. Table Use the table widget to display raw data in a grid of rows and columns. The dashboard user will be able to sort and paginate through the entire dataset, perform aggregation, and add formatting like currencies, percentage or positive and negative background colors. Column Use the column widget to display one or more metrics against one dimension. The horizontal x-axis of the chart shows the Dimension , and on the vertical y-axis are the Metrics . You need to calculate at least one metric, but you can add as many as you want. \ud83d\udcda Example: Display the CPC and CPM by acquisition channel. Stacked Column Use the stacked column widget to display one metric against two dimensions. In a stacked column chart, each of the vertical bars from a column widget is segmented by a second Stack Dimension . By default, the height of each segment in the bar is the value of the metric. If you choose to Stack 100 percent , the height of each segment is the proportion of the metric. \ud83d\udcda Example: Display the CPC by acquisition channel and day of the week. Bar Use the bar widget to display a column widget in a horizontal direction. Stacked Bar Use the stacked bar widget to display a stacked column widget in a horizontal direction. Line Use the line widget to display one or more metrics against an ordered dimension (e.g. date, ranking). The horizontal x-axis of the chart shows the ordered Dimension , and on the vertical y-axis are the Metrics . You need to calculate at least one metric, but you can add as many as you want. By default, the x-axis is ordered by the Dimension in ascending order. Usually, you'll want to keep it like this as in a line chart, the order of the data points represents something meaningful, like the order of time. \ud83d\udca1 Line charts are currently the best chart for time series data. A dedicated time series chart is coming soon. \ud83d\udcda Example: Display the CPC and CPM by week. Stacked Line Use the stacked line widgets to display one metric grouped by a stacked dimension against an ordered dimension. Pie Use the pie widget to display one metric against one dimension as a percentage. Each slice of the pie shows the Dimension , and the size of the slice of the percentage of the metric Metric . You can only calculate one metric. \ud83d\udca1 Pie charts are most useful for a few data points with large differences in metrics. For pie charts with more slices and minor variations in the data, consider the column chart. Area Use the area widget to display a line widget with a shaded area under the line. Donut Use the donut widget to display a pie widget, where the slices become segments of a donut shape. Scatter Use the scatter widget to display the relationship between two metrics for one dimension. The horizontal x-axis of the chart shows the first Metric , and the vertical y-axis is the second Metric . Each data point on the scatter graph shows the values of the two metrics for each category in the Dimension . The scatter widget is useful to find if any relationship holds between the two metrics, independently of the value of the dimension. \ud83d\udcda Example: Display the CPC versus CPM by acquisition channel to validate a correlation. Funnel Use the funnel widget to display multiple metrics over the stages of a process . Each segment of the funnel shows the stage, and the size of the segment is a Metric . By default, the stages of the funnel are ordered by the size of the metric. \ud83d\udcda Example: Display total users by the stage of an e-commerce purchasing journey. Pyramid Use the pyramid widget to display multiple metrics in a hierarchy . Each segment of the pyramid shows the stage in the hierarchy, and the size of the segment is a Metric . By default, the stages of the pyramid are ordered by the size of the metric. \ud83d\udca1 A pyramid widget is the reverse of a funnel widget. Radar Use the radar widget to display multiple metrics, optionally against one dimension. Each data point of the radar chart shows a Metric . If you optionally add a Dimension , each line represents a separate category. \ud83d\udca1 Radar charts are most useful to compare a large number of metrics across a handful of categories. If you only have two data metrics, consider a scatter chart. If you have a large number of categories, consider a column chart. Bubble Use the bubble widget to display the relationship between three metrics for one dimension. In a bubble chart, each of the data points from a scatter widget has a size determined by the value of a third metric ( Size Dimension ). Heatmap Use the heatmap widget to display one metric against two dimensions, in a grid of rows and columns. The rows and columns of the table show the two Dimensions , and the value and coloring represents the Metric . \ud83d\udca1 The heatmap widget is like a pivot table with conditional formatting. Metric A metric widget displays a single numeric value derived from an aggregation. They can be useful to show key insights like KPIs. If your page has a date range control or you added a date range to the widget itself you can select Compare to previous period to enable percentage change indicator. Click Positive decrease to display a reduction as positive. Gauge The gauge metric is perfect for showing percental progress in an intuitive manner. Simply provide a number or aggregation in percent and vo\u00edla! Timeseries Timeseries charts are optimized for working with time data like stock prices. The dimension should always be a time, date or datetime column. Timeseries charts allow you to zoom into particular time frames and bin the data accordingly when getting a high-level view. Currently, we support: Line and stacked lines Column and stacked columns Area Combination Charts Combination charts allow you to combine line, column, and area charts into a single widget. First, select the dimension you want to plot on the X-Axis. All charts will use this as reference. Then add a chart of your choice and select the metric you want to display. You can select the secondary Y-axis checkbox to plot a chart on the right Y-axis. We recommend using not more than three different charts per widget to convey a clear and easily to understandable message. URL Embed Use the URL embed widget to insert website embeds into your dashboards. You might find some websites limit domains they are able to embed to, if this is the case you can either reach out the administrator of the website to whitelist Gyana or if you own the website configure it yourself. Image Upload image files to your dashboard to decorate it or provide visual information. Date range control The Date range control widget enables you to filter selected charts by the same date range. Simply drag the widget onto your page select a preset period or select Custom and provide a Start and/or End date. All widgets that have a Date range column on the current page will update accordingly.","title":"Widgets"},{"location":"widgets/#widgets-reference","text":"How to use each widget in dashboards. Our detailed guide to each widget in workflows. Over time, we'll expand each widget into a separate page with a detailed description, visual examples, and comparison to popular BI tools.","title":"Widgets reference"},{"location":"widgets/#text","text":"Use the text widget to write explanatory notes on your dashboard.","title":"Text"},{"location":"widgets/#table","text":"Use the table widget to display raw data in a grid of rows and columns. The dashboard user will be able to sort and paginate through the entire dataset, perform aggregation, and add formatting like currencies, percentage or positive and negative background colors.","title":"Table"},{"location":"widgets/#column","text":"Use the column widget to display one or more metrics against one dimension. The horizontal x-axis of the chart shows the Dimension , and on the vertical y-axis are the Metrics . You need to calculate at least one metric, but you can add as many as you want. \ud83d\udcda Example: Display the CPC and CPM by acquisition channel.","title":"Column"},{"location":"widgets/#stacked-column","text":"Use the stacked column widget to display one metric against two dimensions. In a stacked column chart, each of the vertical bars from a column widget is segmented by a second Stack Dimension . By default, the height of each segment in the bar is the value of the metric. If you choose to Stack 100 percent , the height of each segment is the proportion of the metric. \ud83d\udcda Example: Display the CPC by acquisition channel and day of the week.","title":"Stacked Column"},{"location":"widgets/#bar","text":"Use the bar widget to display a column widget in a horizontal direction.","title":"Bar"},{"location":"widgets/#stacked-bar","text":"Use the stacked bar widget to display a stacked column widget in a horizontal direction.","title":"Stacked Bar"},{"location":"widgets/#line","text":"Use the line widget to display one or more metrics against an ordered dimension (e.g. date, ranking). The horizontal x-axis of the chart shows the ordered Dimension , and on the vertical y-axis are the Metrics . You need to calculate at least one metric, but you can add as many as you want. By default, the x-axis is ordered by the Dimension in ascending order. Usually, you'll want to keep it like this as in a line chart, the order of the data points represents something meaningful, like the order of time. \ud83d\udca1 Line charts are currently the best chart for time series data. A dedicated time series chart is coming soon. \ud83d\udcda Example: Display the CPC and CPM by week.","title":"Line"},{"location":"widgets/#stacked-line","text":"Use the stacked line widgets to display one metric grouped by a stacked dimension against an ordered dimension.","title":"Stacked Line"},{"location":"widgets/#pie","text":"Use the pie widget to display one metric against one dimension as a percentage. Each slice of the pie shows the Dimension , and the size of the slice of the percentage of the metric Metric . You can only calculate one metric. \ud83d\udca1 Pie charts are most useful for a few data points with large differences in metrics. For pie charts with more slices and minor variations in the data, consider the column chart.","title":"Pie"},{"location":"widgets/#area","text":"Use the area widget to display a line widget with a shaded area under the line.","title":"Area"},{"location":"widgets/#donut","text":"Use the donut widget to display a pie widget, where the slices become segments of a donut shape.","title":"Donut"},{"location":"widgets/#scatter","text":"Use the scatter widget to display the relationship between two metrics for one dimension. The horizontal x-axis of the chart shows the first Metric , and the vertical y-axis is the second Metric . Each data point on the scatter graph shows the values of the two metrics for each category in the Dimension . The scatter widget is useful to find if any relationship holds between the two metrics, independently of the value of the dimension. \ud83d\udcda Example: Display the CPC versus CPM by acquisition channel to validate a correlation.","title":"Scatter"},{"location":"widgets/#funnel","text":"Use the funnel widget to display multiple metrics over the stages of a process . Each segment of the funnel shows the stage, and the size of the segment is a Metric . By default, the stages of the funnel are ordered by the size of the metric. \ud83d\udcda Example: Display total users by the stage of an e-commerce purchasing journey.","title":"Funnel"},{"location":"widgets/#pyramid","text":"Use the pyramid widget to display multiple metrics in a hierarchy . Each segment of the pyramid shows the stage in the hierarchy, and the size of the segment is a Metric . By default, the stages of the pyramid are ordered by the size of the metric. \ud83d\udca1 A pyramid widget is the reverse of a funnel widget.","title":"Pyramid"},{"location":"widgets/#radar","text":"Use the radar widget to display multiple metrics, optionally against one dimension. Each data point of the radar chart shows a Metric . If you optionally add a Dimension , each line represents a separate category. \ud83d\udca1 Radar charts are most useful to compare a large number of metrics across a handful of categories. If you only have two data metrics, consider a scatter chart. If you have a large number of categories, consider a column chart.","title":"Radar"},{"location":"widgets/#bubble","text":"Use the bubble widget to display the relationship between three metrics for one dimension. In a bubble chart, each of the data points from a scatter widget has a size determined by the value of a third metric ( Size Dimension ).","title":"Bubble"},{"location":"widgets/#heatmap","text":"Use the heatmap widget to display one metric against two dimensions, in a grid of rows and columns. The rows and columns of the table show the two Dimensions , and the value and coloring represents the Metric . \ud83d\udca1 The heatmap widget is like a pivot table with conditional formatting.","title":"Heatmap"},{"location":"widgets/#metric","text":"A metric widget displays a single numeric value derived from an aggregation. They can be useful to show key insights like KPIs. If your page has a date range control or you added a date range to the widget itself you can select Compare to previous period to enable percentage change indicator. Click Positive decrease to display a reduction as positive.","title":"Metric"},{"location":"widgets/#gauge","text":"The gauge metric is perfect for showing percental progress in an intuitive manner. Simply provide a number or aggregation in percent and vo\u00edla!","title":"Gauge"},{"location":"widgets/#timeseries","text":"Timeseries charts are optimized for working with time data like stock prices. The dimension should always be a time, date or datetime column. Timeseries charts allow you to zoom into particular time frames and bin the data accordingly when getting a high-level view. Currently, we support: Line and stacked lines Column and stacked columns Area","title":"Timeseries"},{"location":"widgets/#combination-charts","text":"Combination charts allow you to combine line, column, and area charts into a single widget. First, select the dimension you want to plot on the X-Axis. All charts will use this as reference. Then add a chart of your choice and select the metric you want to display. You can select the secondary Y-axis checkbox to plot a chart on the right Y-axis. We recommend using not more than three different charts per widget to convey a clear and easily to understandable message.","title":"Combination Charts"},{"location":"widgets/#url-embed","text":"Use the URL embed widget to insert website embeds into your dashboards. You might find some websites limit domains they are able to embed to, if this is the case you can either reach out the administrator of the website to whitelist Gyana or if you own the website configure it yourself.","title":"URL Embed"},{"location":"widgets/#image","text":"Upload image files to your dashboard to decorate it or provide visual information.","title":"Image"},{"location":"widgets/#date-range-control","text":"The Date range control widget enables you to filter selected charts by the same date range. Simply drag the widget onto your page select a preset period or select Custom and provide a Start and/or End date. All widgets that have a Date range column on the current page will update accordingly.","title":"Date range control"},{"location":"workflows/","text":"Workflows How to work with data and build new sources in Gyana. A workflow is a visual editor to clean, transform, and analyse your data. Think of workflows like spreadsheets, but better suited for data analytics. Instead of manually deleting rows or adding formulas, you define each transformation once and they'll be run automatically in future. Workflows are the nuts and bolts of your data analytics work. Use them to prepare data, build segments and calculate new metrics. \ud83c\udfd7 Building your workflow To build a workflow, you drag-n-drop nodes onto the canvas and connect them together. Data flows from the right side (output) of a node into the left side (input) of the next node. Certain nodes (e.g. joins) have multiple inputs. There are two special nodes: Get data will import data from an integration or another workflow Save data will export data and make it available in other workflows or dashboards \ud83d\udca1 You should always start with a Get data node, otherwise you'll have no data to work with! To configure a node, click the edit button below it (or double click it). You edit the configuration, and preview the results before saving. We've written a guide for every node if you run into any issues. \ud83d\udca1 For example, in the filter node, you'll need to choose the column (\"city\"), predicate (\"equals\") and value (\"London\"). At the moment, we have nodes for most common data transformations, including a formula editor (think Excel). If you see something obvious missing, do let us know! \u25b6\ufe0f Running your workflow While you build your workflow, any preview is just temporary. To save the results, you need to click Run and wait for it to complete successfully. \ud83d\udca1 Running a workflow is optional. You only need to do it if you plan to use the results in another workflow or dashboard. If the workflow fails, you'll see an error indicator on the relevant node. Once you've opened the node and fixed the issue, you'll be able to run the workflow again. After you've run a workflow for the first time, data from the Save data nodes will be available in other workflows and dashboards. You are free to modify and run a workflow as often as you like, and the changes will be reflected in downstream workflows and dashboards automatically. \ud83d\udca1 By default, workflows only run when you click Run workflow . To learn about scheduling workflows, take a look at our Automate feature. \ud83d\ude4c Collaborating on workflows If you're working in a team, it's important that your team members can understand and modify your workflows without introducing mistakes. We've added a few features to make this easier: You can rename individual nodes to describe what they do Use format to turn your spaghetti mess into a clear layout Add text nodes to explain what's happening \ud83d\udd2e What does the future hold? Workflows are a visual way to write SQL. If you hadn't realised that yet - great, we are doing our job! We believe you shouldn't need to learn SQL to do data analytics. Our focus is to continue to make improvements everywhere to keep things that way. Alongside that, we're planning to add special nodes for features like language analysis, text generation, geo-location, marketing enrichments and third party APIs. We've already built a sentiment analysis node in this direction. Watch this space!","title":"Workflows"},{"location":"workflows/#workflows","text":"How to work with data and build new sources in Gyana. A workflow is a visual editor to clean, transform, and analyse your data. Think of workflows like spreadsheets, but better suited for data analytics. Instead of manually deleting rows or adding formulas, you define each transformation once and they'll be run automatically in future. Workflows are the nuts and bolts of your data analytics work. Use them to prepare data, build segments and calculate new metrics.","title":"Workflows"},{"location":"workflows/#building-your-workflow","text":"To build a workflow, you drag-n-drop nodes onto the canvas and connect them together. Data flows from the right side (output) of a node into the left side (input) of the next node. Certain nodes (e.g. joins) have multiple inputs. There are two special nodes: Get data will import data from an integration or another workflow Save data will export data and make it available in other workflows or dashboards \ud83d\udca1 You should always start with a Get data node, otherwise you'll have no data to work with! To configure a node, click the edit button below it (or double click it). You edit the configuration, and preview the results before saving. We've written a guide for every node if you run into any issues. \ud83d\udca1 For example, in the filter node, you'll need to choose the column (\"city\"), predicate (\"equals\") and value (\"London\"). At the moment, we have nodes for most common data transformations, including a formula editor (think Excel). If you see something obvious missing, do let us know!","title":"\ud83c\udfd7 Building your workflow"},{"location":"workflows/#running-your-workflow","text":"While you build your workflow, any preview is just temporary. To save the results, you need to click Run and wait for it to complete successfully. \ud83d\udca1 Running a workflow is optional. You only need to do it if you plan to use the results in another workflow or dashboard. If the workflow fails, you'll see an error indicator on the relevant node. Once you've opened the node and fixed the issue, you'll be able to run the workflow again. After you've run a workflow for the first time, data from the Save data nodes will be available in other workflows and dashboards. You are free to modify and run a workflow as often as you like, and the changes will be reflected in downstream workflows and dashboards automatically. \ud83d\udca1 By default, workflows only run when you click Run workflow . To learn about scheduling workflows, take a look at our Automate feature.","title":"\u25b6\ufe0f Running your workflow"},{"location":"workflows/#collaborating-on-workflows","text":"If you're working in a team, it's important that your team members can understand and modify your workflows without introducing mistakes. We've added a few features to make this easier: You can rename individual nodes to describe what they do Use format to turn your spaghetti mess into a clear layout Add text nodes to explain what's happening","title":"\ud83d\ude4c Collaborating on workflows"},{"location":"workflows/#what-does-the-future-hold","text":"Workflows are a visual way to write SQL. If you hadn't realised that yet - great, we are doing our job! We believe you shouldn't need to learn SQL to do data analytics. Our focus is to continue to make improvements everywhere to keep things that way. Alongside that, we're planning to add special nodes for features like language analysis, text generation, geo-location, marketing enrichments and third party APIs. We've already built a sentiment analysis node in this direction. Watch this space!","title":"\ud83d\udd2e What does the future hold?"},{"location":"backup/","text":"What is Gyana? A no-code reporting tool with big ambitions \ud83d\udcaa Before you ask, Gyana is a Sanskrit word for \u201cknowledge\u201d, and not the name of South American country \ud83e\udd23 (yes, we get this question a lot!). If you\u2019re anything like us, you have lots of questions and you want to answer them with data. You\u2019ve tried dashboard tools, but they lack flexibility and you have to pay for expensive add-ons. We built Gyana as an affordable, all in one alternative. We want anyone to use data in their workflow, while supporting all the power features you\u2019d expect. Whether you work with multiple clients or simply want to make sense of your own data, you work too hard to waste valuable time and money on limited data tools. Reliable data analytics is the foundation for you to deliver your real value and delight your customers. \ud83e\udd14 Why Gyana? Gyana integrates with all your advertising, analytics, e-comm and custom data sources. You can start by building a dashboard, answer specific questions with our visual workflow editor and share results in a single click. Things you can do with Gyana : Integrate with our 80+ most common data sources Add Google Sheets via a URL in one-click Upload CSV exports to pull in any other data Build powerful workflows with 100% SQL coverage Design dashboards with our freeform canvas Share your reports with live URLs Collaborate in multiple organisations with teams Use projects to separate work internally and with clients And much more... \ud83d\udd2e What does the future hold? To be honest, we\u2019re just getting started! Our vision is make working with data easier for the 99.6% of the world who can't code. Everything is driven by our community - join us to contribute new feature ideas, learn from webinars and discuss use cases with fellow data analytics enthusiasts. Our product roadmap is public, you can contribute anytime. Good luck, and let us know what you come up with! \u2764\ufe0f The Gyana Team Next articles Learn collaboration basics Add your first data source","title":"What is Gyana?"},{"location":"backup/#what-is-gyana","text":"A no-code reporting tool with big ambitions \ud83d\udcaa Before you ask, Gyana is a Sanskrit word for \u201cknowledge\u201d, and not the name of South American country \ud83e\udd23 (yes, we get this question a lot!). If you\u2019re anything like us, you have lots of questions and you want to answer them with data. You\u2019ve tried dashboard tools, but they lack flexibility and you have to pay for expensive add-ons. We built Gyana as an affordable, all in one alternative. We want anyone to use data in their workflow, while supporting all the power features you\u2019d expect. Whether you work with multiple clients or simply want to make sense of your own data, you work too hard to waste valuable time and money on limited data tools. Reliable data analytics is the foundation for you to deliver your real value and delight your customers.","title":"What is Gyana?"},{"location":"backup/#why-gyana","text":"Gyana integrates with all your advertising, analytics, e-comm and custom data sources. You can start by building a dashboard, answer specific questions with our visual workflow editor and share results in a single click. Things you can do with Gyana : Integrate with our 80+ most common data sources Add Google Sheets via a URL in one-click Upload CSV exports to pull in any other data Build powerful workflows with 100% SQL coverage Design dashboards with our freeform canvas Share your reports with live URLs Collaborate in multiple organisations with teams Use projects to separate work internally and with clients And much more...","title":"\ud83e\udd14 Why Gyana?"},{"location":"backup/#what-does-the-future-hold","text":"To be honest, we\u2019re just getting started! Our vision is make working with data easier for the 99.6% of the world who can't code. Everything is driven by our community - join us to contribute new feature ideas, learn from webinars and discuss use cases with fellow data analytics enthusiasts. Our product roadmap is public, you can contribute anytime. Good luck, and let us know what you come up with! \u2764\ufe0f The Gyana Team","title":"\ud83d\udd2e What does the future hold?"},{"location":"backup/#next-articles","text":"Learn collaboration basics Add your first data source","title":"Next articles"}]}